{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"source/assets/img/3-16-2.png","path":"assets/img/3-16-2.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-16-1.png","path":"assets/img/3-16-1.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-16-3.png","path":"assets/img/3-16-3.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-16-4.png","path":"assets/img/3-16-4.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-16-5.png","path":"assets/img/3-16-5.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-16-7.png","path":"assets/img/3-16-7.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-16-6.png","path":"assets/img/3-16-6.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-17-3.png","path":"assets/img/3-17-3.png","modified":0,"renderable":0},{"_id":"source/assets/img/4-1-1.png","path":"assets/img/4-1-1.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-17-1.png","path":"assets/img/3-17-1.png","modified":0,"renderable":0},{"_id":"source/assets/img/3-17-2.png","path":"assets/img/3-17-2.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/yilia/source/assets/img/favicon.ico","path":"assets/img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/yilia/source/assets/img/avatar.jpg","path":"assets/img/avatar.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1488420970234},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1488420970234},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1488420970235},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1488420970234},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1488420970234},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1488420970235},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1488420970234},{"_id":"source/_posts/WPF笔记.md","hash":"834901d48b4e52d2f1a013ae34b192f35b727246","modified":1491364699062},{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1488420970280},{"_id":"themes/yilia/_config.yml","hash":"0a42cd0e7a96b6554545464ee18d2a48d04e188e","modified":1488535552447},{"_id":"source/_posts/JS对字符串操作.md","hash":"fc0c0c754c986ce5abd93d1f9e84a9e42147c60b","modified":1490780972571},{"_id":"source/_posts/my-first-blog.md","hash":"f40086706d27c3dafbff87ce3831be857c405570","modified":1491382299763},{"_id":"themes/yilia/package.json","hash":"4631f9013f0b1c5fc5d73af4c3624375bfe4d109","modified":1488420970262},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1488420970235},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1488420970235},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1488420970235},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1488420970236},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1488420970236},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1488420970236},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1488420970236},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1488420970260},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1488420970260},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1488420970261},{"_id":"source/_posts/从零到gulp.md","hash":"6f2cfe3e2171f3b82d6e0a7496373d89141577f1","modified":1489746540545},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488420970261},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488420970261},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1488420970261},{"_id":"source/_posts/git学习记录.md","hash":"aa62271ce03e681056b66c373e7fe805c9247779","modified":1491033428292},{"_id":"source/_posts/去掉jQuery.md","hash":"42d577bd96c9869a1062f6a1e2bc15e7242d67aa","modified":1491477107853},{"_id":"themes/yilia/source/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1488420970278},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1488420970261},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1488420970279},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1488420970262},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1488420970197},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1488420970199},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1488418830116},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1488420970279},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1488420970274},{"_id":"themes/yilia/.git/packed-refs","hash":"ce0fffa24e8426ff1d3cdd215fc2af90b9c41a37","modified":1488420970195},{"_id":"themes/yilia/source/main.2d7529.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1488420970278},{"_id":"themes/yilia/.git/index","hash":"27411a18ad940955455d152a3d75f7e290be1ae9","modified":1488446006520},{"_id":"source/assets/img/3-16-2.png","hash":"bc82e202aa55743f463e496a2cc8f2b0327bde4a","modified":1489655799390},{"_id":"source/assets/img/3-16-1.png","hash":"8b4244cc6c1b7c55ecfe1533dbe69d9b7f5afa7b","modified":1489655794103},{"_id":"source/assets/img/3-16-3.png","hash":"77bcb5571e6d65213d1425a724195f485eec3280","modified":1489655834373},{"_id":"source/assets/img/3-16-4.png","hash":"c9ec6969aea3b66bc98561c87718881100bce747","modified":1489655848209},{"_id":"source/assets/img/3-16-5.png","hash":"1ec658685ed93d0f1c7586740f77a4173ff7b761","modified":1489655868569},{"_id":"source/assets/img/3-16-7.png","hash":"04021d5841517c6589c7989899aa10a2e238d757","modified":1489655895402},{"_id":"source/assets/img/3-16-6.png","hash":"79b18e5198d33629074eff597804c57607ac0217","modified":1489655883716},{"_id":"source/assets/img/3-17-3.png","hash":"1c7365afac2215622c7c57add345abf0c57a7311","modified":1489741657444},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1488420970236},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1488420970236},{"_id":"source/assets/img/4-1-1.png","hash":"8ed40e6f86ecdd782794523a85e42780829bd161","modified":1491034077736},{"_id":"source/assets/img/3-17-1.png","hash":"656ee2a91ca5a1274876c9fb493e8af687ba0f3c","modified":1489741630490},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1488420970237},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1488420970237},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"14563d925203cc1781bfd620d6ba40dcc0007931","modified":1490780579171},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1488420970237},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"4767e666849ac2600c7a1cbf94c54cf702864f80","modified":1488420970237},{"_id":"source/assets/img/3-17-2.png","hash":"52160d91985674650e7fae8501ea8953323e6665","modified":1489741646385},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1488420970238},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1488420970258},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1488420970238},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1488420970238},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1488420970258},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1488420970237},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1488420970275},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1488420970260},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1488420970275},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1488420970260},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1488420970276},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1488420970276},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1488420970276},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1488420970275},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1488420970277},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1488420970277},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1488420970262},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1488420970260},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1488420970275},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1488420970262},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1488420970262},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1488420970263},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1488420970263},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"948e44c47c3d70584da93e7ce025dede9b7573d7","modified":1488420970265},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1488420970267},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1488420970267},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"5dc23be94451d54f0757de85747fd75061e8cf52","modified":1488420970265},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1488420970267},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1488420970267},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1488420970268},{"_id":"themes/yilia/source-src/css/left.scss","hash":"1ee3dd6fa50186af5bedb09d4a0e6b47ddb1b57b","modified":1488420970268},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1488420970263},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1488420970268},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1488420970263},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1488420970268},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1488420970269},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1488420970269},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1488420970269},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1488420970269},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1488420970270},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1488420970270},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1488420970271},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1488420970268},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1488420970271},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1488420970272},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1488420970271},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1488420970273},{"_id":"themes/yilia/source-src/js/fix.js","hash":"eccdcc7ee79adebf450bc655b2e80eb6801421a6","modified":1488420970272},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1488420970273},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1488420970273},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1488420970270},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1488420970274},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1488418830116},{"_id":"themes/yilia/.git/logs/HEAD","hash":"de7140be3fc762d86ca11c5daf4a12ccf05cdcd1","modified":1488420970198},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"1ec274e0e5ea39d45a02e6a5ae46eb0df3772f7b","modified":1488438410524},{"_id":"themes/yilia/source/img/favicon.ico","hash":"34a66e4cfff87c4d4a06a4955a4eca21614b0c8d","modified":1488438557199},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1488420970258},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1488420970258},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1488420970273},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1488420970259},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1488420970274},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1488420970259},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1488420970259},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1488420970274},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"2cd28137873957bfcf73f2c0202ce9d4d3b32a1b","modified":1488441580666},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1488420970264},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1488420970264},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1488420970264},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1488420970265},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1488420970265},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1488420970266},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1488420970266},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1488420970267},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1488420970266},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1488420970268},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1488418830116},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1488420970259},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1488418830116},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1488418830116},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1488420970267},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1488420970264},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1488418830116},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1488418830116},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1488418830116},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1488418830116},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1488418830116},{"_id":"themes/yilia/.git/refs/heads/master","hash":"16c9033891e94fe5e58ea0af0d925519a76eb2c1","modified":1488420970198},{"_id":"themes/yilia/source/assets/img/favicon.ico","hash":"34a66e4cfff87c4d4a06a4955a4eca21614b0c8d","modified":1488438557199},{"_id":"themes/yilia/source/assets/img/avatar.jpg","hash":"1ec274e0e5ea39d45a02e6a5ae46eb0df3772f7b","modified":1488438410524},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1488418830116},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"de7140be3fc762d86ca11c5daf4a12ccf05cdcd1","modified":1488420970198},{"_id":"themes/yilia/.git/objects/pack/pack-534ed087cd03ab863ae65ee95a84a8f360c77409.idx","hash":"dbd1613680bd52d8b9b532571b41b083dcf3e23a","modified":1488420969985},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1488420970195},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"de7140be3fc762d86ca11c5daf4a12ccf05cdcd1","modified":1488420970197},{"_id":"themes/yilia/.git/objects/pack/pack-534ed087cd03ab863ae65ee95a84a8f360c77409.pack","hash":"b1b64a710e09ed260b4ea2a4c4655e5b7922db77","modified":1488420970039},{"_id":"public/atom.xml","hash":"ce74236d5e2d85435615516c55304ea36ba82a25","modified":1492570721479},{"_id":"public/content.json","hash":"d3e2e97b4050ebac0f9f02b852687e39599bf6b5","modified":1492570721520},{"_id":"public/2017/04/01/去掉jQuery/index.html","hash":"aff31df6a9465b893451f33581cf9812dd7dcb69","modified":1492570721634},{"_id":"public/2017/03/17/git学习记录/index.html","hash":"87824436542bd4d26d99c4c2d19ced97d0410d5a","modified":1492570721733},{"_id":"public/2017/03/16/从零到gulp/index.html","hash":"306c9ea97b80d09dfb9706bff0300a6ab5250f83","modified":1492570721737},{"_id":"public/2017/03/02/WPF笔记/index.html","hash":"07a5e14893af4324229aec53386dd57890d3209a","modified":1492570721747},{"_id":"public/2017/03/02/my-first-blog/index.html","hash":"ca09a4e6695d2604072c0e8e9945e6fac00cfc72","modified":1492570721747},{"_id":"public/archives/index.html","hash":"17a175abdb6fe4dc240287eb5a43e6c29e2939c2","modified":1492570721747},{"_id":"public/archives/page/2/index.html","hash":"f830cc07f6954a8d66d51e8375ae2f5ddfb87835","modified":1492570721747},{"_id":"public/archives/2017/index.html","hash":"c91e0b679bef4c203cfd610a8033714862ebc246","modified":1492570721747},{"_id":"public/archives/2017/page/2/index.html","hash":"3b36cf54edc1597d5ddfcfca661fa3cae8d0c55d","modified":1492570721747},{"_id":"public/archives/2017/03/index.html","hash":"62ec80653cc48d2cb013f95812de336c3aa5733d","modified":1492570721747},{"_id":"public/archives/2017/04/index.html","hash":"3bc3ca30abeb1e404064fb005287a50372e82be5","modified":1492570721747},{"_id":"public/index.html","hash":"1a29675a631c3a4865214ac6b572ade43ae6f2fb","modified":1492570721747},{"_id":"public/page/2/index.html","hash":"6a5c487fa917dc1f962f0de32497ed665419e7cb","modified":1492570721747},{"_id":"public/tags/wpf/index.html","hash":"d7b640a5765ad2472fd459980ea3a04cc9bb86cb","modified":1492570721747},{"_id":"public/tags/js/index.html","hash":"33c8513fbdcec141fd326ce309e3bd72f57f7e6d","modified":1492570721747},{"_id":"public/categories/others/index.html","hash":"492360566fde45b95c9970926322fe59ce5bf823","modified":1492570721748},{"_id":"public/categories/font-end/index.html","hash":"54a7bf918ea3ab44f023062755f81f9ddc249fbb","modified":1492570721748},{"_id":"public/2017/03/02/JS对字符串操作/index.html","hash":"a5ef3b5e0782ed4540a8a865700651920b31d628","modified":1492570721748},{"_id":"public/assets/img/3-16-1.png","hash":"8b4244cc6c1b7c55ecfe1533dbe69d9b7f5afa7b","modified":1492570721753},{"_id":"public/assets/img/3-16-4.png","hash":"c9ec6969aea3b66bc98561c87718881100bce747","modified":1492570721753},{"_id":"public/assets/img/3-16-2.png","hash":"bc82e202aa55743f463e496a2cc8f2b0327bde4a","modified":1492570721753},{"_id":"public/assets/img/3-16-5.png","hash":"1ec658685ed93d0f1c7586740f77a4173ff7b761","modified":1492570721753},{"_id":"public/assets/img/3-16-7.png","hash":"04021d5841517c6589c7989899aa10a2e238d757","modified":1492570721753},{"_id":"public/assets/img/3-16-3.png","hash":"77bcb5571e6d65213d1425a724195f485eec3280","modified":1492570721753},{"_id":"public/assets/img/3-16-6.png","hash":"79b18e5198d33629074eff597804c57607ac0217","modified":1492570721753},{"_id":"public/assets/img/3-17-3.png","hash":"1c7365afac2215622c7c57add345abf0c57a7311","modified":1492570721753},{"_id":"public/assets/img/4-1-1.png","hash":"8ed40e6f86ecdd782794523a85e42780829bd161","modified":1492570721753},{"_id":"public/assets/img/3-17-1.png","hash":"656ee2a91ca5a1274876c9fb493e8af687ba0f3c","modified":1492570721753},{"_id":"public/assets/img/3-17-2.png","hash":"52160d91985674650e7fae8501ea8953323e6665","modified":1492570721753},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1492570721753},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1492570721753},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1492570721753},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1492570721753},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1492570721753},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1492570721754},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1492570721754},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1492570721754},{"_id":"public/img/avatar.jpg","hash":"1ec274e0e5ea39d45a02e6a5ae46eb0df3772f7b","modified":1492570721756},{"_id":"public/img/favicon.ico","hash":"34a66e4cfff87c4d4a06a4955a4eca21614b0c8d","modified":1492570721761},{"_id":"public/assets/img/favicon.ico","hash":"34a66e4cfff87c4d4a06a4955a4eca21614b0c8d","modified":1492570721761},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1492570721761},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1492570721762},{"_id":"public/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1492570721762},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1492570721762},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1492570721762},{"_id":"public/assets/img/avatar.jpg","hash":"1ec274e0e5ea39d45a02e6a5ae46eb0df3772f7b","modified":1492570721762}],"Category":[{"name":"Others","_id":"cj1oe2i0u00029o9aj52715bi"},{"name":"Font-end","_id":"cj1oe2i0x00049o9aetkqlamq"}],"Data":[],"Page":[],"Post":[{"title":"WPF笔记","date":"2017-03-02T10:41:51.000Z","_content":"\n###  改写窗体：\n\n**1.WPF中使用默认窗口框架的外观，可以更改属性：([参考](http://www.cnblogs.com/libaoheng/archive/2011/11/18/2253751.html))**\n*Icon*: 指定窗口的图标；\n*Title*: 指定窗口的标题；\n*WindowStyle*: 指定窗口样式，有4个取值：\n- None，无边框；（当ResizeMode属性为NoResize时，仅剩下窗口核心。）\n- SingleBorderWindow，单边框【默认】；\n- ThreeDBorderWindow，3D边框；\n- ToolBorderWindow，工具箱窗口；\n- ResizeMode 是指定大小调节样式，有4个取值：\n- NoResize，不可调节，同时没有最大最小按钮；\n- CanMinimize，不可调节。但可以最小化；（此时最大化按钮不可用）\n- CanResize，可调节【默认】；\n- CanResizeWithGrid，可根据网格调节；（窗口右下脚显示可调节网格）\n-  WindowStartLocation 指定窗口初始位置，有3个取值：\n-  Manual，手工指定位置，表示可以通过设置其Top、Left属性值来决定窗口的初始位置；\n-  CenterScreen，屏幕中央；\n-  CenterOwner，父窗体中央；\n >另外：\n - MaxWidth、MinWidth、MaxHeight、MinHeight ：表示窗口最大宽度、最小宽度、最大高度、最小高度。可以通过得到和更改这些属性值，来获取和改变窗口的大小和长宽范围。\n - TitlebarHeight=\"45\"          //修改窗体titlebar高度；\n - AllowsTransparency：获取或设置一个值，该值指示窗口的工作区是否支持透明；\n \n<!--more-->\n\n \n**2.设置窗体无边框：**\n     设置 WindowStyle=\"None\"、  AllowsTransparency=\"True\" 即可。\n     *如下*：\n``` xml\n<Window\n    x:Class=\"WpfApplication1.MainWindow\" \n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" \n    Title=\"MainWindow\" Height=\"350\" Width=\"525\"   \n    WindowStyle=\"None\" \n    AllowsTransparency=\"True\"> \n    <Grid> \n    </Grid> \n</Window>  \n```\n\n**3.窗口拖放：**\n``` cs\nprivate void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e){\n    this.DragMove();\n}\n```\n\n*调用：*\n\n``` cs\nthis.MouseLeftButtonDown += delegate { DragMove(); };\n```\n\n或：\n``` cs\nMouseDown=\"Window_MouseDown\"\nprivate void Window_MouseDown(object sender, MouseButtonEventArgs e){\n\tif (e.LeftButton == MouseButtonState.Pressed){\n        DragMove();\n\t}\n}\n```\n     \n**4.自定义窗体最大化、最小化、关闭**\n如下： \n``` cs\nprivate void btn_min_Click(object sender, RoutedEventArgs e){\n    this.WindowState = WindowState.Minimized;     \n}\nprivate void btn_max_Click(object sender, RoutedEventArgs e){\n    if(this.WindowState == WindowState.Maximized){\n    \tthis.WindowState = WindowState.Normal; //还原 \n    }else{\n       this.WindowState = WindowState.Maximized;\n    }\n}\nprivate void btn_close_Click(object sender, RoutedEventArgs e){\n    this.Close();\n}\n```\n\t\n**5.窗口阴影：**(WPF4.5)\n``` xml\n<Window x:Class=\"WPFTest.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    Title=\"MainWindow\"\n    Width=\"525\"\n    Height=\"350\">\n    <WindowChrome.WindowChrome>\n        <WindowChrome CaptionHeight=\"30\"\n                      CornerRadius=\"0\"\n                      GlassFrameThickness=\"1\"\n                      NonClientFrameEdges=\"None\"\n                      ResizeBorderThickness=\"5\"\n                      UseAeroCaptionButtons=\"False\" />\n    \t</WindowChrome>\n    <Grid> \n    </Grid>\n</Window>\n```\n\n\n### tooltip\n给某个空间增加tooltip显示详细信息:\n\n``` cs\nprivate void Tip_MouseMove(object sender, MouseEventArgs e){\n    ListViewItem listitem = (sender as Image).TryFindParent<ListViewItem>();\n    FDObject item = (FDObject)listitem.DataContext;           \n    if (item != null){\n        (sender as Image).ToolTip = item.path;\n    }\n}\n```\n\t\n\n直接用control.Tooltip=text;   在鼠标移入事件中确定\n\n### System.Drawing.Image对象\n**System.Drawing.Image 和 System.Windows.Media.ImageSource 之间转换**\n**例：**\n``` cs\nMemoryStream ms = new MemoryStream ();\nvar bitmap = new BitmapImage();\nbitmap.BeginInit();\nuserImage.Save (ms,System.Drawing.Imaging. ImageFormat.Bmp);\nms.Seek(0, SeekOrigin.Begin);\nbitmap.StreamSource = ms;\nbitmap.EndInit();\nemplImage.Source = bitmap;\nreturn emplImage;\n```\n\t\n\t\n### 旋转动画：\n**例：**\n``` cs\n private void Button_Click(object sender, RoutedEventArgs e){\n    RotateTransform a = new RotateTransform();\n    Refresh.RenderTransform = a;\n    Refresh.RenderTransformOrigin = new Point(0.5, 0.5);\n    DoubleAnimation myDouble = new DoubleAnimation(0, 360, new Duration(TimeSpan.FromSeconds(1)));\n    Storyboard story = new Storyboard();\n    myDouble.RepeatBehavior = RepeatBehavior.Forever;\n    story.Children.Add(myDouble);\n    Storyboard.SetTarget(myDouble, Refresh);\n    Storyboard.SetTargetProperty(myDouble, new PropertyPath(\"RenderTransform.Angle\"));\n    story.Begin();\n}\n```\n``` xml\n<Grid>\n    <TextBlock x:Name=\"Refresh\"  VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"    Text=\"&#xe712;\"   />\n    <Button VerticalAlignment=\"Bottom\" HorizontalAlignment=\"Center\" Width=\"100\" Height=\"50\" Click=\"Button_Click\"/>\n</Grid>\n    \n```","source":"_posts/WPF笔记.md","raw":"---\ntitle: WPF笔记\ndate: 2017-03-02 18:41:51\ncategories: Others\ntags: WPF \n---\n\n###  改写窗体：\n\n**1.WPF中使用默认窗口框架的外观，可以更改属性：([参考](http://www.cnblogs.com/libaoheng/archive/2011/11/18/2253751.html))**\n*Icon*: 指定窗口的图标；\n*Title*: 指定窗口的标题；\n*WindowStyle*: 指定窗口样式，有4个取值：\n- None，无边框；（当ResizeMode属性为NoResize时，仅剩下窗口核心。）\n- SingleBorderWindow，单边框【默认】；\n- ThreeDBorderWindow，3D边框；\n- ToolBorderWindow，工具箱窗口；\n- ResizeMode 是指定大小调节样式，有4个取值：\n- NoResize，不可调节，同时没有最大最小按钮；\n- CanMinimize，不可调节。但可以最小化；（此时最大化按钮不可用）\n- CanResize，可调节【默认】；\n- CanResizeWithGrid，可根据网格调节；（窗口右下脚显示可调节网格）\n-  WindowStartLocation 指定窗口初始位置，有3个取值：\n-  Manual，手工指定位置，表示可以通过设置其Top、Left属性值来决定窗口的初始位置；\n-  CenterScreen，屏幕中央；\n-  CenterOwner，父窗体中央；\n >另外：\n - MaxWidth、MinWidth、MaxHeight、MinHeight ：表示窗口最大宽度、最小宽度、最大高度、最小高度。可以通过得到和更改这些属性值，来获取和改变窗口的大小和长宽范围。\n - TitlebarHeight=\"45\"          //修改窗体titlebar高度；\n - AllowsTransparency：获取或设置一个值，该值指示窗口的工作区是否支持透明；\n \n<!--more-->\n\n \n**2.设置窗体无边框：**\n     设置 WindowStyle=\"None\"、  AllowsTransparency=\"True\" 即可。\n     *如下*：\n``` xml\n<Window\n    x:Class=\"WpfApplication1.MainWindow\" \n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" \n    Title=\"MainWindow\" Height=\"350\" Width=\"525\"   \n    WindowStyle=\"None\" \n    AllowsTransparency=\"True\"> \n    <Grid> \n    </Grid> \n</Window>  \n```\n\n**3.窗口拖放：**\n``` cs\nprivate void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e){\n    this.DragMove();\n}\n```\n\n*调用：*\n\n``` cs\nthis.MouseLeftButtonDown += delegate { DragMove(); };\n```\n\n或：\n``` cs\nMouseDown=\"Window_MouseDown\"\nprivate void Window_MouseDown(object sender, MouseButtonEventArgs e){\n\tif (e.LeftButton == MouseButtonState.Pressed){\n        DragMove();\n\t}\n}\n```\n     \n**4.自定义窗体最大化、最小化、关闭**\n如下： \n``` cs\nprivate void btn_min_Click(object sender, RoutedEventArgs e){\n    this.WindowState = WindowState.Minimized;     \n}\nprivate void btn_max_Click(object sender, RoutedEventArgs e){\n    if(this.WindowState == WindowState.Maximized){\n    \tthis.WindowState = WindowState.Normal; //还原 \n    }else{\n       this.WindowState = WindowState.Maximized;\n    }\n}\nprivate void btn_close_Click(object sender, RoutedEventArgs e){\n    this.Close();\n}\n```\n\t\n**5.窗口阴影：**(WPF4.5)\n``` xml\n<Window x:Class=\"WPFTest.MainWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    Title=\"MainWindow\"\n    Width=\"525\"\n    Height=\"350\">\n    <WindowChrome.WindowChrome>\n        <WindowChrome CaptionHeight=\"30\"\n                      CornerRadius=\"0\"\n                      GlassFrameThickness=\"1\"\n                      NonClientFrameEdges=\"None\"\n                      ResizeBorderThickness=\"5\"\n                      UseAeroCaptionButtons=\"False\" />\n    \t</WindowChrome>\n    <Grid> \n    </Grid>\n</Window>\n```\n\n\n### tooltip\n给某个空间增加tooltip显示详细信息:\n\n``` cs\nprivate void Tip_MouseMove(object sender, MouseEventArgs e){\n    ListViewItem listitem = (sender as Image).TryFindParent<ListViewItem>();\n    FDObject item = (FDObject)listitem.DataContext;           \n    if (item != null){\n        (sender as Image).ToolTip = item.path;\n    }\n}\n```\n\t\n\n直接用control.Tooltip=text;   在鼠标移入事件中确定\n\n### System.Drawing.Image对象\n**System.Drawing.Image 和 System.Windows.Media.ImageSource 之间转换**\n**例：**\n``` cs\nMemoryStream ms = new MemoryStream ();\nvar bitmap = new BitmapImage();\nbitmap.BeginInit();\nuserImage.Save (ms,System.Drawing.Imaging. ImageFormat.Bmp);\nms.Seek(0, SeekOrigin.Begin);\nbitmap.StreamSource = ms;\nbitmap.EndInit();\nemplImage.Source = bitmap;\nreturn emplImage;\n```\n\t\n\t\n### 旋转动画：\n**例：**\n``` cs\n private void Button_Click(object sender, RoutedEventArgs e){\n    RotateTransform a = new RotateTransform();\n    Refresh.RenderTransform = a;\n    Refresh.RenderTransformOrigin = new Point(0.5, 0.5);\n    DoubleAnimation myDouble = new DoubleAnimation(0, 360, new Duration(TimeSpan.FromSeconds(1)));\n    Storyboard story = new Storyboard();\n    myDouble.RepeatBehavior = RepeatBehavior.Forever;\n    story.Children.Add(myDouble);\n    Storyboard.SetTarget(myDouble, Refresh);\n    Storyboard.SetTargetProperty(myDouble, new PropertyPath(\"RenderTransform.Angle\"));\n    story.Begin();\n}\n```\n``` xml\n<Grid>\n    <TextBlock x:Name=\"Refresh\"  VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\"    Text=\"&#xe712;\"   />\n    <Button VerticalAlignment=\"Bottom\" HorizontalAlignment=\"Center\" Width=\"100\" Height=\"50\" Click=\"Button_Click\"/>\n</Grid>\n    \n```","slug":"WPF笔记","published":1,"updated":"2017-04-05T03:58:19.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1oe2i0p00009o9a7wby3280","content":"<h3 id=\"改写窗体：\"><a href=\"#改写窗体：\" class=\"headerlink\" title=\"改写窗体：\"></a>改写窗体：</h3><p><strong>1.WPF中使用默认窗口框架的外观，可以更改属性：(<a href=\"http://www.cnblogs.com/libaoheng/archive/2011/11/18/2253751.html\" target=\"_blank\" rel=\"external\">参考</a>)</strong><br><em>Icon</em>: 指定窗口的图标；<br><em>Title</em>: 指定窗口的标题；<br><em>WindowStyle</em>: 指定窗口样式，有4个取值：</p>\n<ul>\n<li>None，无边框；（当ResizeMode属性为NoResize时，仅剩下窗口核心。）</li>\n<li>SingleBorderWindow，单边框【默认】；</li>\n<li>ThreeDBorderWindow，3D边框；</li>\n<li>ToolBorderWindow，工具箱窗口；</li>\n<li>ResizeMode 是指定大小调节样式，有4个取值：</li>\n<li>NoResize，不可调节，同时没有最大最小按钮；</li>\n<li>CanMinimize，不可调节。但可以最小化；（此时最大化按钮不可用）</li>\n<li>CanResize，可调节【默认】；</li>\n<li>CanResizeWithGrid，可根据网格调节；（窗口右下脚显示可调节网格）</li>\n<li>WindowStartLocation 指定窗口初始位置，有3个取值：</li>\n<li>Manual，手工指定位置，表示可以通过设置其Top、Left属性值来决定窗口的初始位置；</li>\n<li>CenterScreen，屏幕中央；</li>\n<li>CenterOwner，父窗体中央；<blockquote>\n<p>另外：</p>\n<ul>\n<li>MaxWidth、MinWidth、MaxHeight、MinHeight ：表示窗口最大宽度、最小宽度、最大高度、最小高度。可以通过得到和更改这些属性值，来获取和改变窗口的大小和长宽范围。</li>\n<li>TitlebarHeight=”45”          //修改窗体titlebar高度；</li>\n<li>AllowsTransparency：获取或设置一个值，该值指示窗口的工作区是否支持透明；</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<p><strong>2.设置窗体无边框：</strong><br>     设置 WindowStyle=”None”、  AllowsTransparency=”True” 即可。<br>     <em>如下</em>：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Window</span></span></div><div class=\"line\">    <span class=\"attr\">x:Class</span>=<span class=\"string\">\"WpfApplication1.MainWindow\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns:x</span>=<span class=\"string\">\"http://schemas.microsoft.com/winfx/2006/xaml\"</span> </div><div class=\"line\">    <span class=\"attr\">Title</span>=<span class=\"string\">\"MainWindow\"</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"350\"</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"525\"</span>   </div><div class=\"line\">    <span class=\"attr\">WindowStyle</span>=<span class=\"string\">\"None\"</span> </div><div class=\"line\">    <span class=\"attr\">AllowsTransparency</span>=<span class=\"string\">\"True\"</span>&gt; </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Window</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>3.窗口拖放：</strong><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Window_MouseLeftButtonDown</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, MouseButtonEventArgs e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.DragMove();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>调用：</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.MouseLeftButtonDown += <span class=\"keyword\">delegate</span> &#123; DragMove(); &#125;;</div></pre></td></tr></table></figure>\n<p>或：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MouseDown=<span class=\"string\">\"Window_MouseDown\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Window_MouseDown</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, MouseButtonEventArgs e</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (e.LeftButton == MouseButtonState.Pressed)&#123;</div><div class=\"line\">        DragMove();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>4.自定义窗体最大化、最小化、关闭</strong><br>如下：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btn_min_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.WindowState = WindowState.Minimized;     </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btn_max_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.WindowState == WindowState.Maximized)&#123;</div><div class=\"line\">    \t<span class=\"keyword\">this</span>.WindowState = WindowState.Normal; <span class=\"comment\">//还原 </span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.WindowState = WindowState.Maximized;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btn_close_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.Close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>5.窗口阴影：</strong>(WPF4.5)<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Window</span> <span class=\"attr\">x:Class</span>=<span class=\"string\">\"WPFTest.MainWindow\"</span></span></div><div class=\"line\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:x</span>=<span class=\"string\">\"http://schemas.microsoft.com/winfx/2006/xaml\"</span></div><div class=\"line\">    <span class=\"attr\">Title</span>=<span class=\"string\">\"MainWindow\"</span></div><div class=\"line\">    <span class=\"attr\">Width</span>=<span class=\"string\">\"525\"</span></div><div class=\"line\">    <span class=\"attr\">Height</span>=<span class=\"string\">\"350\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">WindowChrome.WindowChrome</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">WindowChrome</span> <span class=\"attr\">CaptionHeight</span>=<span class=\"string\">\"30\"</span></span></div><div class=\"line\">                      <span class=\"attr\">CornerRadius</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">                      <span class=\"attr\">GlassFrameThickness</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">                      <span class=\"attr\">NonClientFrameEdges</span>=<span class=\"string\">\"None\"</span></div><div class=\"line\">                      <span class=\"attr\">ResizeBorderThickness</span>=<span class=\"string\">\"5\"</span></div><div class=\"line\">                      <span class=\"attr\">UseAeroCaptionButtons</span>=<span class=\"string\">\"False\"</span> /&gt;</div><div class=\"line\">    \t<span class=\"tag\">&lt;/<span class=\"name\">WindowChrome</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Window</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"tooltip\"><a href=\"#tooltip\" class=\"headerlink\" title=\"tooltip\"></a>tooltip</h3><p>给某个空间增加tooltip显示详细信息:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Tip_MouseMove</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, MouseEventArgs e</span>)</span>&#123;</div><div class=\"line\">    ListViewItem listitem = (sender <span class=\"keyword\">as</span> Image).TryFindParent&lt;ListViewItem&gt;();</div><div class=\"line\">    FDObject item = (FDObject)listitem.DataContext;           </div><div class=\"line\">    <span class=\"keyword\">if</span> (item != <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">        (sender <span class=\"keyword\">as</span> Image).ToolTip = item.path;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>直接用control.Tooltip=text;   在鼠标移入事件中确定</p>\n<h3 id=\"System-Drawing-Image对象\"><a href=\"#System-Drawing-Image对象\" class=\"headerlink\" title=\"System.Drawing.Image对象\"></a>System.Drawing.Image对象</h3><p><strong>System.Drawing.Image 和 System.Windows.Media.ImageSource 之间转换</strong><br><strong>例：</strong><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">MemoryStream ms = <span class=\"keyword\">new</span> MemoryStream ();</div><div class=\"line\"><span class=\"keyword\">var</span> bitmap = <span class=\"keyword\">new</span> BitmapImage();</div><div class=\"line\">bitmap.BeginInit();</div><div class=\"line\">userImage.Save (ms,System.Drawing.Imaging. ImageFormat.Bmp);</div><div class=\"line\">ms.Seek(<span class=\"number\">0</span>, SeekOrigin.Begin);</div><div class=\"line\">bitmap.StreamSource = ms;</div><div class=\"line\">bitmap.EndInit();</div><div class=\"line\">emplImage.Source = bitmap;</div><div class=\"line\"><span class=\"keyword\">return</span> emplImage;</div></pre></td></tr></table></figure></p>\n<h3 id=\"旋转动画：\"><a href=\"#旋转动画：\" class=\"headerlink\" title=\"旋转动画：\"></a>旋转动画：</h3><p><strong>例：</strong><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Button_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class=\"line\">    RotateTransform a = <span class=\"keyword\">new</span> RotateTransform();</div><div class=\"line\">    Refresh.RenderTransform = a;</div><div class=\"line\">    Refresh.RenderTransformOrigin = <span class=\"keyword\">new</span> Point(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    DoubleAnimation myDouble = <span class=\"keyword\">new</span> DoubleAnimation(<span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">new</span> Duration(TimeSpan.FromSeconds(<span class=\"number\">1</span>)));</div><div class=\"line\">    Storyboard story = <span class=\"keyword\">new</span> Storyboard();</div><div class=\"line\">    myDouble.RepeatBehavior = RepeatBehavior.Forever;</div><div class=\"line\">    story.Children.Add(myDouble);</div><div class=\"line\">    Storyboard.SetTarget(myDouble, Refresh);</div><div class=\"line\">    Storyboard.SetTargetProperty(myDouble, <span class=\"keyword\">new</span> PropertyPath(<span class=\"string\">\"RenderTransform.Angle\"</span>));</div><div class=\"line\">    story.Begin();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextBlock</span> <span class=\"attr\">x:Name</span>=<span class=\"string\">\"Refresh\"</span>  <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span>    <span class=\"attr\">Text</span>=<span class=\"string\">\"&amp;#xe712;\"</span>   /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Bottom\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">Click</span>=<span class=\"string\">\"Button_Click\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"<h3 id=\"改写窗体：\"><a href=\"#改写窗体：\" class=\"headerlink\" title=\"改写窗体：\"></a>改写窗体：</h3><p><strong>1.WPF中使用默认窗口框架的外观，可以更改属性：(<a href=\"http://www.cnblogs.com/libaoheng/archive/2011/11/18/2253751.html\">参考</a>)</strong><br><em>Icon</em>: 指定窗口的图标；<br><em>Title</em>: 指定窗口的标题；<br><em>WindowStyle</em>: 指定窗口样式，有4个取值：</p>\n<ul>\n<li>None，无边框；（当ResizeMode属性为NoResize时，仅剩下窗口核心。）</li>\n<li>SingleBorderWindow，单边框【默认】；</li>\n<li>ThreeDBorderWindow，3D边框；</li>\n<li>ToolBorderWindow，工具箱窗口；</li>\n<li>ResizeMode 是指定大小调节样式，有4个取值：</li>\n<li>NoResize，不可调节，同时没有最大最小按钮；</li>\n<li>CanMinimize，不可调节。但可以最小化；（此时最大化按钮不可用）</li>\n<li>CanResize，可调节【默认】；</li>\n<li>CanResizeWithGrid，可根据网格调节；（窗口右下脚显示可调节网格）</li>\n<li>WindowStartLocation 指定窗口初始位置，有3个取值：</li>\n<li>Manual，手工指定位置，表示可以通过设置其Top、Left属性值来决定窗口的初始位置；</li>\n<li>CenterScreen，屏幕中央；</li>\n<li>CenterOwner，父窗体中央；<blockquote>\n<p>另外：</p>\n<ul>\n<li>MaxWidth、MinWidth、MaxHeight、MinHeight ：表示窗口最大宽度、最小宽度、最大高度、最小高度。可以通过得到和更改这些属性值，来获取和改变窗口的大小和长宽范围。</li>\n<li>TitlebarHeight=”45”          //修改窗体titlebar高度；</li>\n<li>AllowsTransparency：获取或设置一个值，该值指示窗口的工作区是否支持透明；</li>\n</ul>\n</blockquote>\n</li>\n</ul>","more":"<p><strong>2.设置窗体无边框：</strong><br>     设置 WindowStyle=”None”、  AllowsTransparency=”True” 即可。<br>     <em>如下</em>：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Window</span></div><div class=\"line\">    <span class=\"attr\">x:Class</span>=<span class=\"string\">\"WpfApplication1.MainWindow\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span> </div><div class=\"line\">    <span class=\"attr\">xmlns:x</span>=<span class=\"string\">\"http://schemas.microsoft.com/winfx/2006/xaml\"</span> </div><div class=\"line\">    <span class=\"attr\">Title</span>=<span class=\"string\">\"MainWindow\"</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"350\"</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"525\"</span>   </div><div class=\"line\">    <span class=\"attr\">WindowStyle</span>=<span class=\"string\">\"None\"</span> </div><div class=\"line\">    <span class=\"attr\">AllowsTransparency</span>=<span class=\"string\">\"True\"</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span> </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Window</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><strong>3.窗口拖放：</strong><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Window_MouseLeftButtonDown</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, MouseButtonEventArgs e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.DragMove();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>调用：</em></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.MouseLeftButtonDown += <span class=\"keyword\">delegate</span> &#123; DragMove(); &#125;;</div></pre></td></tr></table></figure>\n<p>或：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MouseDown=<span class=\"string\">\"Window_MouseDown\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Window_MouseDown</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, MouseButtonEventArgs e</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (e.LeftButton == MouseButtonState.Pressed)&#123;</div><div class=\"line\">        DragMove();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>4.自定义窗体最大化、最小化、关闭</strong><br>如下：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btn_min_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.WindowState = WindowState.Minimized;     </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btn_max_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.WindowState == WindowState.Maximized)&#123;</div><div class=\"line\">    \t<span class=\"keyword\">this</span>.WindowState = WindowState.Normal; <span class=\"comment\">//还原 </span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">       <span class=\"keyword\">this</span>.WindowState = WindowState.Maximized;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btn_close_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.Close();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>5.窗口阴影：</strong>(WPF4.5)<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Window</span> <span class=\"attr\">x:Class</span>=<span class=\"string\">\"WPFTest.MainWindow\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span></div><div class=\"line\">    <span class=\"attr\">xmlns:x</span>=<span class=\"string\">\"http://schemas.microsoft.com/winfx/2006/xaml\"</span></div><div class=\"line\">    <span class=\"attr\">Title</span>=<span class=\"string\">\"MainWindow\"</span></div><div class=\"line\">    <span class=\"attr\">Width</span>=<span class=\"string\">\"525\"</span></div><div class=\"line\">    <span class=\"attr\">Height</span>=<span class=\"string\">\"350\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">WindowChrome.WindowChrome</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">WindowChrome</span> <span class=\"attr\">CaptionHeight</span>=<span class=\"string\">\"30\"</span></div><div class=\"line\">                      <span class=\"attr\">CornerRadius</span>=<span class=\"string\">\"0\"</span></div><div class=\"line\">                      <span class=\"attr\">GlassFrameThickness</span>=<span class=\"string\">\"1\"</span></div><div class=\"line\">                      <span class=\"attr\">NonClientFrameEdges</span>=<span class=\"string\">\"None\"</span></div><div class=\"line\">                      <span class=\"attr\">ResizeBorderThickness</span>=<span class=\"string\">\"5\"</span></div><div class=\"line\">                      <span class=\"attr\">UseAeroCaptionButtons</span>=<span class=\"string\">\"False\"</span> /&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;/<span class=\"name\">WindowChrome</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Window</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"tooltip\"><a href=\"#tooltip\" class=\"headerlink\" title=\"tooltip\"></a>tooltip</h3><p>给某个空间增加tooltip显示详细信息:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Tip_MouseMove</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, MouseEventArgs e</span>)</span>&#123;</div><div class=\"line\">    ListViewItem listitem = (sender <span class=\"keyword\">as</span> Image).TryFindParent&lt;ListViewItem&gt;();</div><div class=\"line\">    FDObject item = (FDObject)listitem.DataContext;           </div><div class=\"line\">    <span class=\"keyword\">if</span> (item != <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">        (sender <span class=\"keyword\">as</span> Image).ToolTip = item.path;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>直接用control.Tooltip=text;   在鼠标移入事件中确定</p>\n<h3 id=\"System-Drawing-Image对象\"><a href=\"#System-Drawing-Image对象\" class=\"headerlink\" title=\"System.Drawing.Image对象\"></a>System.Drawing.Image对象</h3><p><strong>System.Drawing.Image 和 System.Windows.Media.ImageSource 之间转换</strong><br><strong>例：</strong><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">MemoryStream ms = <span class=\"keyword\">new</span> MemoryStream ();</div><div class=\"line\"><span class=\"keyword\">var</span> bitmap = <span class=\"keyword\">new</span> BitmapImage();</div><div class=\"line\">bitmap.BeginInit();</div><div class=\"line\">userImage.Save (ms,System.Drawing.Imaging. ImageFormat.Bmp);</div><div class=\"line\">ms.Seek(<span class=\"number\">0</span>, SeekOrigin.Begin);</div><div class=\"line\">bitmap.StreamSource = ms;</div><div class=\"line\">bitmap.EndInit();</div><div class=\"line\">emplImage.Source = bitmap;</div><div class=\"line\"><span class=\"keyword\">return</span> emplImage;</div></pre></td></tr></table></figure></p>\n<h3 id=\"旋转动画：\"><a href=\"#旋转动画：\" class=\"headerlink\" title=\"旋转动画：\"></a>旋转动画：</h3><p><strong>例：</strong><br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Button_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class=\"line\">    RotateTransform a = <span class=\"keyword\">new</span> RotateTransform();</div><div class=\"line\">    Refresh.RenderTransform = a;</div><div class=\"line\">    Refresh.RenderTransformOrigin = <span class=\"keyword\">new</span> Point(<span class=\"number\">0.5</span>, <span class=\"number\">0.5</span>);</div><div class=\"line\">    DoubleAnimation myDouble = <span class=\"keyword\">new</span> DoubleAnimation(<span class=\"number\">0</span>, <span class=\"number\">360</span>, <span class=\"keyword\">new</span> Duration(TimeSpan.FromSeconds(<span class=\"number\">1</span>)));</div><div class=\"line\">    Storyboard story = <span class=\"keyword\">new</span> Storyboard();</div><div class=\"line\">    myDouble.RepeatBehavior = RepeatBehavior.Forever;</div><div class=\"line\">    story.Children.Add(myDouble);</div><div class=\"line\">    Storyboard.SetTarget(myDouble, Refresh);</div><div class=\"line\">    Storyboard.SetTargetProperty(myDouble, <span class=\"keyword\">new</span> PropertyPath(<span class=\"string\">\"RenderTransform.Angle\"</span>));</div><div class=\"line\">    story.Begin();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextBlock</span> <span class=\"attr\">x:Name</span>=<span class=\"string\">\"Refresh\"</span>  <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span>    <span class=\"attr\">Text</span>=<span class=\"string\">\"&amp;#xe712;\"</span>   /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Bottom\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">Click</span>=<span class=\"string\">\"Button_Click\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"JS对字符串操作","date":"2017-03-02T10:44:08.000Z","_content":"\n\n#### 截取字符串：\n\n**1.split： 把一个字符串分割成字符串数组。**\n\n*功能* ：使用一个指定的分隔符把字符串分隔存储到数组\n*语法* ：<font color=red>str.split(separator,size)</font>\n*参数* ：\n- str：必选项。要截取的字符串。\n- separator: 必选项。要分割的条件，是字符串或表达式。\n- size：可选项。返回数组的长度。不定义则全部返回。\n\n*实例* ：\n``` javascript\nvar str=”jpg|bmp|gif|ico|png”; arr=str.split(”|”);//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组\n```\n<!--more-->\n\n**2.slice：   提取字符串的某个部分。**\n\n*功能*：返回一个新的数组，包含从start到end（不包括该元素）的arrayobject中的元素。\n*语法*：<font color=red>str.slice(startPos,endPos)</font>\n*参数*：\n- startPos: 必选项。字符串的起始位置。如果参数负数，则从字符串的结尾处算起。 也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\n- endPos: 可选项。提取字符串的结束小标。 如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。\n\n*实例*：\n``` javascript\nvar str='ahji3o3s4e6p8a0sdewqdasj'\nalert(str.slice(2,5))   //结果ji3\n```\n\n\n**3.substring：  返回指定位置的子字符串。**\n\n*功能*：用于提取字符串中介于两个指定下标之间的字符。\n*语法*：<font color=red>str.substring(startPos,endPos)</font>\n*参数*：\n- str: 必选项。要提取的字符串。\n- startPos: 必选项。子字符串的起始位置，该索引从0开始计算。 一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。\n- endPos: 可选项。子字符串的结束位置，该索引从0开始计算。 一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。 如果省略该参数，那么返回的子串会一直到字符串的结尾。\n\n> 注： 返回 一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 说明 substring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 如果 start 或 end 为负数，那么它将被替换为 0。\n\n*实例*：\n``` javascript\nstr='ahji3o3s4e6p8a0sdewqdasj'\nalert(str.substring(2,6))   //结果为ji3o3\n```\n\n\n**4.substr:    返回字符串中指定位置开始的指定长度的子字符串。**\n\n*语法*：<font color=red>str.substr(startPos,length)</font>\n*参数*：\n- str：必选项。要提取的字符串。\n- startPos: 必选项。返回字符串的起始位置，单位为数字。 字符串中的第一个字符的索引为 0。为负数，则默认为0\n- length: 可选项。返回字符串的字符个数。 说明 如果 length 为 0 或负数，将返回一个空字符串。 如果没有指定该参数，则子字符串将延续到stringObject的最后。\n\n*实例*：\n``` javascript\nvar str = \"0123456789\";\nalert(str.substring(5));\t//\"56789\"\nalert(str.substring(10));\t//\"\"\nalert(str.substring(2,12));\t//\"23456789\"\nalert(str.substring(2,-2));\t//\"01\"\nalert(str.substring(-1,5));\t//\"01234\"\n```\n\n\n\n#### 合并字符串\n\n**1.join**\n\n*功能*：使用您选择的分隔符将一个数组合并为一个字符串。\n\n*实例*：\n``` javascript\nvar delimitedString=myArray.join(delimiter);\nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”);\nvar portableList=myList.join(”|”);//结果是jpg|bmp|gif|ico|png\n```\n \n**2.concat**\n\n*功能*：将两个数组连接在一起。\n\n*实例*：\n``` javascript\narr1=[1,2,3,4]\narr2=[5,6,7,8]\nalert(arr1.concat(arr2))  //结果为[1,2,3,4,5,6,7,8]\n```\n\n#### 其他：\n\n**1.charAt**\n\n *功能*：返回指定位置的<font color=red>字符</font>。字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。\n\n*实例*:\n``` javascript\nvar str='a,g,i,d,o,v,w,d,k,p'\nalert(str.charAt(2))  //结果为g\n```\n\n**2.charCodeAt**\n\n*功能*：charCodeAt() 方法可返回指定位置的字符的<font color=red>Unicode 编码</font>。这个返回值是 0 - 65535 之间的整数。\n方法 charCodeAt() 与 charAt() 方法执行的操作相似，只不过前者返回的是位于指定位置的字符的编码，而后者返回的是字符子串。\n\n*实例*：\n``` javascript\nvar str='a,g,i,d,o,v,w,d,k,p'\nalert(str.charCodeAt(2))  //结果为103。即g的Unicode编码为103\n```\n\n**3.replace:   用于在字符串中用一些字符替换另一些字符。**\n\n*语法*：<font color=red>str.replace(string,replacement)</font>\n*参数*：\n- str：必选项。要替换的字符串。\n- string:必选项。正则对象。\n- replacement: 必选项。要替换的字符。\n","source":"_posts/JS对字符串操作.md","raw":"---\ntitle: JS对字符串操作\ndate: 2017-03-02 18:44:08\ncategories: Font-end\ntags: JavaScript\n---\n\n\n#### 截取字符串：\n\n**1.split： 把一个字符串分割成字符串数组。**\n\n*功能* ：使用一个指定的分隔符把字符串分隔存储到数组\n*语法* ：<font color=red>str.split(separator,size)</font>\n*参数* ：\n- str：必选项。要截取的字符串。\n- separator: 必选项。要分割的条件，是字符串或表达式。\n- size：可选项。返回数组的长度。不定义则全部返回。\n\n*实例* ：\n``` javascript\nvar str=”jpg|bmp|gif|ico|png”; arr=str.split(”|”);//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组\n```\n<!--more-->\n\n**2.slice：   提取字符串的某个部分。**\n\n*功能*：返回一个新的数组，包含从start到end（不包括该元素）的arrayobject中的元素。\n*语法*：<font color=red>str.slice(startPos,endPos)</font>\n*参数*：\n- startPos: 必选项。字符串的起始位置。如果参数负数，则从字符串的结尾处算起。 也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。\n- endPos: 可选项。提取字符串的结束小标。 如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。\n\n*实例*：\n``` javascript\nvar str='ahji3o3s4e6p8a0sdewqdasj'\nalert(str.slice(2,5))   //结果ji3\n```\n\n\n**3.substring：  返回指定位置的子字符串。**\n\n*功能*：用于提取字符串中介于两个指定下标之间的字符。\n*语法*：<font color=red>str.substring(startPos,endPos)</font>\n*参数*：\n- str: 必选项。要提取的字符串。\n- startPos: 必选项。子字符串的起始位置，该索引从0开始计算。 一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。\n- endPos: 可选项。子字符串的结束位置，该索引从0开始计算。 一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。 如果省略该参数，那么返回的子串会一直到字符串的结尾。\n\n> 注： 返回 一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 说明 substring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 如果 start 或 end 为负数，那么它将被替换为 0。\n\n*实例*：\n``` javascript\nstr='ahji3o3s4e6p8a0sdewqdasj'\nalert(str.substring(2,6))   //结果为ji3o3\n```\n\n\n**4.substr:    返回字符串中指定位置开始的指定长度的子字符串。**\n\n*语法*：<font color=red>str.substr(startPos,length)</font>\n*参数*：\n- str：必选项。要提取的字符串。\n- startPos: 必选项。返回字符串的起始位置，单位为数字。 字符串中的第一个字符的索引为 0。为负数，则默认为0\n- length: 可选项。返回字符串的字符个数。 说明 如果 length 为 0 或负数，将返回一个空字符串。 如果没有指定该参数，则子字符串将延续到stringObject的最后。\n\n*实例*：\n``` javascript\nvar str = \"0123456789\";\nalert(str.substring(5));\t//\"56789\"\nalert(str.substring(10));\t//\"\"\nalert(str.substring(2,12));\t//\"23456789\"\nalert(str.substring(2,-2));\t//\"01\"\nalert(str.substring(-1,5));\t//\"01234\"\n```\n\n\n\n#### 合并字符串\n\n**1.join**\n\n*功能*：使用您选择的分隔符将一个数组合并为一个字符串。\n\n*实例*：\n``` javascript\nvar delimitedString=myArray.join(delimiter);\nvar myList=new Array(”jpg”,”bmp”,”gif”,”ico”,”png”);\nvar portableList=myList.join(”|”);//结果是jpg|bmp|gif|ico|png\n```\n \n**2.concat**\n\n*功能*：将两个数组连接在一起。\n\n*实例*：\n``` javascript\narr1=[1,2,3,4]\narr2=[5,6,7,8]\nalert(arr1.concat(arr2))  //结果为[1,2,3,4,5,6,7,8]\n```\n\n#### 其他：\n\n**1.charAt**\n\n *功能*：返回指定位置的<font color=red>字符</font>。字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。\n\n*实例*:\n``` javascript\nvar str='a,g,i,d,o,v,w,d,k,p'\nalert(str.charAt(2))  //结果为g\n```\n\n**2.charCodeAt**\n\n*功能*：charCodeAt() 方法可返回指定位置的字符的<font color=red>Unicode 编码</font>。这个返回值是 0 - 65535 之间的整数。\n方法 charCodeAt() 与 charAt() 方法执行的操作相似，只不过前者返回的是位于指定位置的字符的编码，而后者返回的是字符子串。\n\n*实例*：\n``` javascript\nvar str='a,g,i,d,o,v,w,d,k,p'\nalert(str.charCodeAt(2))  //结果为103。即g的Unicode编码为103\n```\n\n**3.replace:   用于在字符串中用一些字符替换另一些字符。**\n\n*语法*：<font color=red>str.replace(string,replacement)</font>\n*参数*：\n- str：必选项。要替换的字符串。\n- string:必选项。正则对象。\n- replacement: 必选项。要替换的字符。\n","slug":"JS对字符串操作","published":1,"updated":"2017-03-29T09:49:32.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1oe2i0s00019o9a6rl8tg6z","content":"<h4 id=\"截取字符串：\"><a href=\"#截取字符串：\" class=\"headerlink\" title=\"截取字符串：\"></a>截取字符串：</h4><p><strong>1.split： 把一个字符串分割成字符串数组。</strong></p>\n<p><em>功能</em> ：使用一个指定的分隔符把字符串分隔存储到数组<br><em>语法</em> ：<font color=\"red\">str.split(separator,size)</font><br><em>参数</em> ：</p>\n<ul>\n<li>str：必选项。要截取的字符串。</li>\n<li>separator: 必选项。要分割的条件，是字符串或表达式。</li>\n<li>size：可选项。返回数组的长度。不定义则全部返回。</li>\n</ul>\n<p><em>实例</em> ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str=”jpg|bmp|gif|ico|png”; arr=str.split(”|”);<span class=\"comment\">//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><strong>2.slice：   提取字符串的某个部分。</strong></p>\n<p><em>功能</em>：返回一个新的数组，包含从start到end（不包括该元素）的arrayobject中的元素。<br><em>语法</em>：<font color=\"red\">str.slice(startPos,endPos)</font><br><em>参数</em>：</p>\n<ul>\n<li>startPos: 必选项。字符串的起始位置。如果参数负数，则从字符串的结尾处算起。 也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</li>\n<li>endPos: 可选项。提取字符串的结束小标。 如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</li>\n</ul>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'ahji3o3s4e6p8a0sdewqdasj'</span></div><div class=\"line\">alert(str.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>))   <span class=\"comment\">//结果ji3</span></div></pre></td></tr></table></figure></p>\n<p><strong>3.substring：  返回指定位置的子字符串。</strong></p>\n<p><em>功能</em>：用于提取字符串中介于两个指定下标之间的字符。<br><em>语法</em>：<font color=\"red\">str.substring(startPos,endPos)</font><br><em>参数</em>：</p>\n<ul>\n<li>str: 必选项。要提取的字符串。</li>\n<li>startPos: 必选项。子字符串的起始位置，该索引从0开始计算。 一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。</li>\n<li>endPos: 可选项。子字符串的结束位置，该索引从0开始计算。 一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。 如果省略该参数，那么返回的子串会一直到字符串的结尾。</li>\n</ul>\n<blockquote>\n<p>注： 返回 一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 说明 substring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 如果 start 或 end 为负数，那么它将被替换为 0。</p>\n</blockquote>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">'ahji3o3s4e6p8a0sdewqdasj'</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">2</span>,<span class=\"number\">6</span>))   <span class=\"comment\">//结果为ji3o3</span></div></pre></td></tr></table></figure></p>\n<p><strong>4.substr:    返回字符串中指定位置开始的指定长度的子字符串。</strong></p>\n<p><em>语法</em>：<font color=\"red\">str.substr(startPos,length)</font><br><em>参数</em>：</p>\n<ul>\n<li>str：必选项。要提取的字符串。</li>\n<li>startPos: 必选项。返回字符串的起始位置，单位为数字。 字符串中的第一个字符的索引为 0。为负数，则默认为0</li>\n<li>length: 可选项。返回字符串的字符个数。 说明 如果 length 为 0 或负数，将返回一个空字符串。 如果没有指定该参数，则子字符串将延续到stringObject的最后。</li>\n</ul>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"0123456789\"</span>;</div><div class=\"line\">alert(str.substring(<span class=\"number\">5</span>));\t<span class=\"comment\">//\"56789\"</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">10</span>));\t<span class=\"comment\">//\"\"</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">2</span>,<span class=\"number\">12</span>));\t<span class=\"comment\">//\"23456789\"</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">2</span>,<span class=\"number\">-2</span>));\t<span class=\"comment\">//\"01\"</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">-1</span>,<span class=\"number\">5</span>));\t<span class=\"comment\">//\"01234\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"合并字符串\"><a href=\"#合并字符串\" class=\"headerlink\" title=\"合并字符串\"></a>合并字符串</h4><p><strong>1.join</strong></p>\n<p><em>功能</em>：使用您选择的分隔符将一个数组合并为一个字符串。</p>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> delimitedString=myArray.join(delimiter);</div><div class=\"line\"><span class=\"keyword\">var</span> myList=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(”jpg”,”bmp”,”gif”,”ico”,”png”);</div><div class=\"line\"><span class=\"keyword\">var</span> portableList=myList.join(”|”);<span class=\"comment\">//结果是jpg|bmp|gif|ico|png</span></div></pre></td></tr></table></figure></p>\n<p><strong>2.concat</strong></p>\n<p><em>功能</em>：将两个数组连接在一起。</p>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</div><div class=\"line\">arr2=[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</div><div class=\"line\">alert(arr1.concat(arr2))  <span class=\"comment\">//结果为[1,2,3,4,5,6,7,8]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a>其他：</h4><p><strong>1.charAt</strong></p>\n<p> <em>功能</em>：返回指定位置的<font color=\"red\">字符</font>。字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。</p>\n<p><em>实例</em>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'a,g,i,d,o,v,w,d,k,p'</span></div><div class=\"line\">alert(str.charAt(<span class=\"number\">2</span>))  <span class=\"comment\">//结果为g</span></div></pre></td></tr></table></figure></p>\n<p><strong>2.charCodeAt</strong></p>\n<p><em>功能</em>：charCodeAt() 方法可返回指定位置的字符的<font color=\"red\">Unicode 编码</font>。这个返回值是 0 - 65535 之间的整数。<br>方法 charCodeAt() 与 charAt() 方法执行的操作相似，只不过前者返回的是位于指定位置的字符的编码，而后者返回的是字符子串。</p>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'a,g,i,d,o,v,w,d,k,p'</span></div><div class=\"line\">alert(str.charCodeAt(<span class=\"number\">2</span>))  <span class=\"comment\">//结果为103。即g的Unicode编码为103</span></div></pre></td></tr></table></figure></p>\n<p><strong>3.replace:   用于在字符串中用一些字符替换另一些字符。</strong></p>\n<p><em>语法</em>：<font color=\"red\">str.replace(string,replacement)</font><br><em>参数</em>：</p>\n<ul>\n<li>str：必选项。要替换的字符串。</li>\n<li>string:必选项。正则对象。</li>\n<li>replacement: 必选项。要替换的字符。</li>\n</ul>\n","excerpt":"<h4 id=\"截取字符串：\"><a href=\"#截取字符串：\" class=\"headerlink\" title=\"截取字符串：\"></a>截取字符串：</h4><p><strong>1.split： 把一个字符串分割成字符串数组。</strong></p>\n<p><em>功能</em> ：使用一个指定的分隔符把字符串分隔存储到数组<br><em>语法</em> ：<font color=red>str.split(separator,size)</font><br><em>参数</em> ：</p>\n<ul>\n<li>str：必选项。要截取的字符串。</li>\n<li>separator: 必选项。要分割的条件，是字符串或表达式。</li>\n<li>size：可选项。返回数组的长度。不定义则全部返回。</li>\n</ul>\n<p><em>实例</em> ：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str=”jpg|bmp|gif|ico|png”; arr=str.split(”|”);<span class=\"comment\">//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组</span></div></pre></td></tr></table></figure></p>","more":"<p><strong>2.slice：   提取字符串的某个部分。</strong></p>\n<p><em>功能</em>：返回一个新的数组，包含从start到end（不包括该元素）的arrayobject中的元素。<br><em>语法</em>：<font color=red>str.slice(startPos,endPos)</font><br><em>参数</em>：</p>\n<ul>\n<li>startPos: 必选项。字符串的起始位置。如果参数负数，则从字符串的结尾处算起。 也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</li>\n<li>endPos: 可选项。提取字符串的结束小标。 如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</li>\n</ul>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'ahji3o3s4e6p8a0sdewqdasj'</span></div><div class=\"line\">alert(str.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>))   <span class=\"comment\">//结果ji3</span></div></pre></td></tr></table></figure></p>\n<p><strong>3.substring：  返回指定位置的子字符串。</strong></p>\n<p><em>功能</em>：用于提取字符串中介于两个指定下标之间的字符。<br><em>语法</em>：<font color=red>str.substring(startPos,endPos)</font><br><em>参数</em>：</p>\n<ul>\n<li>str: 必选项。要提取的字符串。</li>\n<li>startPos: 必选项。子字符串的起始位置，该索引从0开始计算。 一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。</li>\n<li>endPos: 可选项。子字符串的结束位置，该索引从0开始计算。 一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。 如果省略该参数，那么返回的子串会一直到字符串的结尾。</li>\n</ul>\n<blockquote>\n<p>注： 返回 一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 说明 substring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 如果 start 或 end 为负数，那么它将被替换为 0。</p>\n</blockquote>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">str=<span class=\"string\">'ahji3o3s4e6p8a0sdewqdasj'</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">2</span>,<span class=\"number\">6</span>))   <span class=\"comment\">//结果为ji3o3</span></div></pre></td></tr></table></figure></p>\n<p><strong>4.substr:    返回字符串中指定位置开始的指定长度的子字符串。</strong></p>\n<p><em>语法</em>：<font color=red>str.substr(startPos,length)</font><br><em>参数</em>：</p>\n<ul>\n<li>str：必选项。要提取的字符串。</li>\n<li>startPos: 必选项。返回字符串的起始位置，单位为数字。 字符串中的第一个字符的索引为 0。为负数，则默认为0</li>\n<li>length: 可选项。返回字符串的字符个数。 说明 如果 length 为 0 或负数，将返回一个空字符串。 如果没有指定该参数，则子字符串将延续到stringObject的最后。</li>\n</ul>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"0123456789\"</span>;</div><div class=\"line\">alert(str.substring(<span class=\"number\">5</span>));\t<span class=\"comment\">//\"56789\"</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">10</span>));\t<span class=\"comment\">//\"\"</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">2</span>,<span class=\"number\">12</span>));\t<span class=\"comment\">//\"23456789\"</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">2</span>,<span class=\"number\">-2</span>));\t<span class=\"comment\">//\"01\"</span></div><div class=\"line\">alert(str.substring(<span class=\"number\">-1</span>,<span class=\"number\">5</span>));\t<span class=\"comment\">//\"01234\"</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"合并字符串\"><a href=\"#合并字符串\" class=\"headerlink\" title=\"合并字符串\"></a>合并字符串</h4><p><strong>1.join</strong></p>\n<p><em>功能</em>：使用您选择的分隔符将一个数组合并为一个字符串。</p>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> delimitedString=myArray.join(delimiter);</div><div class=\"line\"><span class=\"keyword\">var</span> myList=<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(”jpg”,”bmp”,”gif”,”ico”,”png”);</div><div class=\"line\"><span class=\"keyword\">var</span> portableList=myList.join(”|”);<span class=\"comment\">//结果是jpg|bmp|gif|ico|png</span></div></pre></td></tr></table></figure></p>\n<p><strong>2.concat</strong></p>\n<p><em>功能</em>：将两个数组连接在一起。</p>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr1=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</div><div class=\"line\">arr2=[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</div><div class=\"line\">alert(arr1.concat(arr2))  <span class=\"comment\">//结果为[1,2,3,4,5,6,7,8]</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"其他：\"><a href=\"#其他：\" class=\"headerlink\" title=\"其他：\"></a>其他：</h4><p><strong>1.charAt</strong></p>\n<p> <em>功能</em>：返回指定位置的<font color=red>字符</font>。字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。</p>\n<p><em>实例</em>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'a,g,i,d,o,v,w,d,k,p'</span></div><div class=\"line\">alert(str.charAt(<span class=\"number\">2</span>))  <span class=\"comment\">//结果为g</span></div></pre></td></tr></table></figure></p>\n<p><strong>2.charCodeAt</strong></p>\n<p><em>功能</em>：charCodeAt() 方法可返回指定位置的字符的<font color=red>Unicode 编码</font>。这个返回值是 0 - 65535 之间的整数。<br>方法 charCodeAt() 与 charAt() 方法执行的操作相似，只不过前者返回的是位于指定位置的字符的编码，而后者返回的是字符子串。</p>\n<p><em>实例</em>：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">'a,g,i,d,o,v,w,d,k,p'</span></div><div class=\"line\">alert(str.charCodeAt(<span class=\"number\">2</span>))  <span class=\"comment\">//结果为103。即g的Unicode编码为103</span></div></pre></td></tr></table></figure></p>\n<p><strong>3.replace:   用于在字符串中用一些字符替换另一些字符。</strong></p>\n<p><em>语法</em>：<font color=red>str.replace(string,replacement)</font><br><em>参数</em>：</p>\n<ul>\n<li>str：必选项。要替换的字符串。</li>\n<li>string:必选项。正则对象。</li>\n<li>replacement: 必选项。要替换的字符。</li>\n</ul>"},{"title":"my first blog","date":"2017-03-02T08:40:04.000Z","_content":"\n博客由hexo+github搭建，遵循markdown语法来编辑博客，网上教程很多，比较简单。\n博客内容来自于印象笔记，从我的小本本上选一些搬出来，(⊙v⊙)嗯！\n","source":"_posts/my-first-blog.md","raw":"---\ntitle: my first blog\ndate: 2017-03-02 16:40:04\ncategories: Others\n---\n\n博客由hexo+github搭建，遵循markdown语法来编辑博客，网上教程很多，比较简单。\n博客内容来自于印象笔记，从我的小本本上选一些搬出来，(⊙v⊙)嗯！\n","slug":"my-first-blog","published":1,"updated":"2017-04-05T08:51:39.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1oe2i26000a9o9a0y1xh97d","content":"<p>博客由hexo+github搭建，遵循markdown语法来编辑博客，网上教程很多，比较简单。<br>博客内容来自于印象笔记，从我的小本本上选一些搬出来，(⊙v⊙)嗯！</p>\n","excerpt":"","more":"<p>博客由hexo+github搭建，遵循markdown语法来编辑博客，网上教程很多，比较简单。<br>博客内容来自于印象笔记，从我的小本本上选一些搬出来，(⊙v⊙)嗯！</p>\n"},{"title":"从零到gulp","date":"2017-03-16T09:13:27.000Z","_content":"\n本菜刚开始写前端页面，目录是这样的，js放一起，html放一起：\n<img src=\"../../../../assets/img/3-16-1.png\"   align=center />\n然后，我开始学nwjs啦，多了一个package.json文件（plugins打算用来放插件，是空的；.log文件打算用node的file模块写入日志），之后本菜默默开始写登录小窗，菜单，托盘，然后...写完demo明白自己很菜开始好好学js。\n<img src=\"../../../../assets/img/3-16-2.png\"   align=center />\n\n<!--more-->\n\n开始刷书，刷博客，刷代码，看小伙伴们的代码...于是我开始写简单页面啦，开始用jquery（获取和操作DOM元素，写ajax请求），angularjs，最初目录是这样：\n<img src=\"../../../../assets/img/3-16-3.png\"   align=center />\n开始安装node，利用npm管理模块，学着小伙伴用webpack，一个入口index.js文件，功能分开写再打包成一个js文件；装fis3，更改代码可以自动刷新页面，目录变成这样：\n<img src=\"../../../../assets/img/3-16-4.png\"   align=center />\n开始好好学angularjs，路由，数据绑定，指令，师傅组装的ui组件...发现自己真的菜，好多知识要学，嗯！舍弃fis3（文件多了，release变慢，-wL要等好久），用http-server，目录变成这样：\n<img src=\"../../../../assets/img/3-16-5.png\"   align=center />\n然后，发现gulp,新大陆！添加一个gulpfile.js文件，用gulp-connect创建web服务器；可以watch页面，gulp-livereload自动刷新；嵌入原来的webpack.config.js还能继续打包；只用运行一个gulp，开心！\n\n某一天，我发现我的cpu原来是这样：\n<img src=\"../../../../assets/img/3-16-6.png\"   align=center />\n开了gulp之后，变成这样：\n<img src=\"../../../../assets/img/3-16-7.png\"   align=center />\n\n.........\n\n\n我想这一定是我的错！\n\n.........\n\n\n\n最后发现用gulp来watch时一定不要加很多文件啊！只watch经常改变的。不然电脑变得超级卡，还以为自己一脚把主机踢坏了(⊙v⊙).....就酱！\n\n感谢师傅！","source":"_posts/从零到gulp.md","raw":"---\ntitle: 从零到gulp\ndate: 2017-03-16 17:13:27\ncategories: Font-end\n---\n\n本菜刚开始写前端页面，目录是这样的，js放一起，html放一起：\n<img src=\"../../../../assets/img/3-16-1.png\"   align=center />\n然后，我开始学nwjs啦，多了一个package.json文件（plugins打算用来放插件，是空的；.log文件打算用node的file模块写入日志），之后本菜默默开始写登录小窗，菜单，托盘，然后...写完demo明白自己很菜开始好好学js。\n<img src=\"../../../../assets/img/3-16-2.png\"   align=center />\n\n<!--more-->\n\n开始刷书，刷博客，刷代码，看小伙伴们的代码...于是我开始写简单页面啦，开始用jquery（获取和操作DOM元素，写ajax请求），angularjs，最初目录是这样：\n<img src=\"../../../../assets/img/3-16-3.png\"   align=center />\n开始安装node，利用npm管理模块，学着小伙伴用webpack，一个入口index.js文件，功能分开写再打包成一个js文件；装fis3，更改代码可以自动刷新页面，目录变成这样：\n<img src=\"../../../../assets/img/3-16-4.png\"   align=center />\n开始好好学angularjs，路由，数据绑定，指令，师傅组装的ui组件...发现自己真的菜，好多知识要学，嗯！舍弃fis3（文件多了，release变慢，-wL要等好久），用http-server，目录变成这样：\n<img src=\"../../../../assets/img/3-16-5.png\"   align=center />\n然后，发现gulp,新大陆！添加一个gulpfile.js文件，用gulp-connect创建web服务器；可以watch页面，gulp-livereload自动刷新；嵌入原来的webpack.config.js还能继续打包；只用运行一个gulp，开心！\n\n某一天，我发现我的cpu原来是这样：\n<img src=\"../../../../assets/img/3-16-6.png\"   align=center />\n开了gulp之后，变成这样：\n<img src=\"../../../../assets/img/3-16-7.png\"   align=center />\n\n.........\n\n\n我想这一定是我的错！\n\n.........\n\n\n\n最后发现用gulp来watch时一定不要加很多文件啊！只watch经常改变的。不然电脑变得超级卡，还以为自己一脚把主机踢坏了(⊙v⊙).....就酱！\n\n感谢师傅！","slug":"从零到gulp","published":1,"updated":"2017-03-17T10:29:00.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1oe2i2q000c9o9avq0u0f6m","content":"<p>本菜刚开始写前端页面，目录是这样的，js放一起，html放一起：<br><img src=\"../../../../assets/img/3-16-1.png\" align=\"center\"><br>然后，我开始学nwjs啦，多了一个package.json文件（plugins打算用来放插件，是空的；.log文件打算用node的file模块写入日志），之后本菜默默开始写登录小窗，菜单，托盘，然后…写完demo明白自己很菜开始好好学js。<br><img src=\"../../../../assets/img/3-16-2.png\" align=\"center\"></p>\n<a id=\"more\"></a>\n<p>开始刷书，刷博客，刷代码，看小伙伴们的代码…于是我开始写简单页面啦，开始用jquery（获取和操作DOM元素，写ajax请求），angularjs，最初目录是这样：<br><img src=\"../../../../assets/img/3-16-3.png\" align=\"center\"><br>开始安装node，利用npm管理模块，学着小伙伴用webpack，一个入口index.js文件，功能分开写再打包成一个js文件；装fis3，更改代码可以自动刷新页面，目录变成这样：<br><img src=\"../../../../assets/img/3-16-4.png\" align=\"center\"><br>开始好好学angularjs，路由，数据绑定，指令，师傅组装的ui组件…发现自己真的菜，好多知识要学，嗯！舍弃fis3（文件多了，release变慢，-wL要等好久），用http-server，目录变成这样：<br><img src=\"../../../../assets/img/3-16-5.png\" align=\"center\"><br>然后，发现gulp,新大陆！添加一个gulpfile.js文件，用gulp-connect创建web服务器；可以watch页面，gulp-livereload自动刷新；嵌入原来的webpack.config.js还能继续打包；只用运行一个gulp，开心！</p>\n<p>某一天，我发现我的cpu原来是这样：<br><img src=\"../../../../assets/img/3-16-6.png\" align=\"center\"><br>开了gulp之后，变成这样：<br><img src=\"../../../../assets/img/3-16-7.png\" align=\"center\"></p>\n<p>………</p>\n<p>我想这一定是我的错！</p>\n<p>………</p>\n<p>最后发现用gulp来watch时一定不要加很多文件啊！只watch经常改变的。不然电脑变得超级卡，还以为自己一脚把主机踢坏了(⊙v⊙)…..就酱！</p>\n<p>感谢师傅！</p>\n","excerpt":"<p>本菜刚开始写前端页面，目录是这样的，js放一起，html放一起：<br><img src=\"../../../../assets/img/3-16-1.png\"   align=center /><br>然后，我开始学nwjs啦，多了一个package.json文件（plugins打算用来放插件，是空的；.log文件打算用node的file模块写入日志），之后本菜默默开始写登录小窗，菜单，托盘，然后…写完demo明白自己很菜开始好好学js。<br><img src=\"../../../../assets/img/3-16-2.png\"   align=center /></p>","more":"<p>开始刷书，刷博客，刷代码，看小伙伴们的代码…于是我开始写简单页面啦，开始用jquery（获取和操作DOM元素，写ajax请求），angularjs，最初目录是这样：<br><img src=\"../../../../assets/img/3-16-3.png\"   align=center /><br>开始安装node，利用npm管理模块，学着小伙伴用webpack，一个入口index.js文件，功能分开写再打包成一个js文件；装fis3，更改代码可以自动刷新页面，目录变成这样：<br><img src=\"../../../../assets/img/3-16-4.png\"   align=center /><br>开始好好学angularjs，路由，数据绑定，指令，师傅组装的ui组件…发现自己真的菜，好多知识要学，嗯！舍弃fis3（文件多了，release变慢，-wL要等好久），用http-server，目录变成这样：<br><img src=\"../../../../assets/img/3-16-5.png\"   align=center /><br>然后，发现gulp,新大陆！添加一个gulpfile.js文件，用gulp-connect创建web服务器；可以watch页面，gulp-livereload自动刷新；嵌入原来的webpack.config.js还能继续打包；只用运行一个gulp，开心！</p>\n<p>某一天，我发现我的cpu原来是这样：<br><img src=\"../../../../assets/img/3-16-6.png\"   align=center /><br>开了gulp之后，变成这样：<br><img src=\"../../../../assets/img/3-16-7.png\"   align=center /></p>\n<p>………</p>\n<p>我想这一定是我的错！</p>\n<p>………</p>\n<p>最后发现用gulp来watch时一定不要加很多文件啊！只watch经常改变的。不然电脑变得超级卡，还以为自己一脚把主机踢坏了(⊙v⊙)…..就酱！</p>\n<p>感谢师傅！</p>"},{"layout":"title","title":"git学习记录","date":"2017-03-17T09:09:02.000Z","_content":"\n公司一直用的是**svn**（集中式版本控制系统 ），一般日常提交代码用**update**（从中央服务器上获取最新代码）和**commit**（将本地代码提交上去，提交前会用*Beyond Compare*软件对比修改一下）两个命令就能满足一般需求，偶尔会看一下日志，用一下版本回滚。但是最近搭博客，开始使用github，了解到**git**（分布式版本控制系统）好像很火？大家都在推荐，于是用了一下这个新工具。\n\n首先，如果你想详细了解git原理和使用，狠狠点击[这里](https://git-scm.com/book/en/v2)！此外，还有很多关于git不同风格的博客啊，比如[廖雪峰](http://www.liaoxuefeng.com)写的git教程。\n但是，如果你口味清奇有趣，可以选择[这个](http://learngitbranching.js.org/)，敲生动，适合食用！\n\n然后，列一下学习记录：\n\n先学点**简单**的：\n\n1.网上下载安装git，得到大礼包：**Git Bash**，**Git GUI**，**Git CMD**，一般操作使用**Git Bash**即可。\n2.本地新建文件，使用*git init*将它变成待用仓库。\n\n<!--more-->\n\n3.获取代码：\n\n``` dos\n\tgit clone <server url> \t\t\t//将远程仓库 上的代码拉到仓库中。\n``` \n\n4.修改代码后，这样提交它：\n\n``` dos\n\tgit add <filename>               //提交 到缓存区（index） \n``` \n\n或者使用：\n\n``` dos\n\tgit add  .                  \t//提交 所有改动文件到缓存区\n``` \n\n再将其提交到本地仓库中：\n\n``` dos\n    git commit -m \"修改信息\"     \t//提交到本地仓库中的HEAD上\n``` \n\n期间，你可以用*git status*查看文件变化。\n\n下图是我修改blog中的文件时，*git status*返回的文件状态\n<img src=\"../../../../assets/img/3-17-1.png\"   align=center />\n\n``` dos\n\tgit push origin master          //提交到远程仓库origin\n``` \n \n<img src=\"../../../../assets/img/3-17-2.png\"   align=center />\n\n如果你没有进行第3步，这里使用：\n\n``` dos\n\tgit remote add origin <server url>\t\t\t//提交到远程仓库\n``` \n\n5.我们经常要将远程仓库中的代码更新本地：\n\n``` dos\n\tgit pull\n``` \n\n满足基本的需求后，我们了解一下git的分支功能：\n\n1.创建、查看、切换分支：\n\n``` dos\n\tgit branch newbranch               //新建一个名newbranch的分支\n    git checkout -b newbranch     \t\t//新建一个名newbranch的分支并切换到新分支\n    git branch                         //查看分支\n    git checkout master                 //回到主分支master\n``` \n   \n然后就可以在确定的分支下操作（比如上方的基础操作）。\n\n2.进行分支间的操作，比如：\n\n``` dos\n\t git branch -d newbranch        //删除这个分支  \n     git merge <branchname>         //合并分支到当前分支\n``` \n\n来一张learngitbranch的图：\n<img src=\"../../../../assets/img/3-17-3.png\"   align=center />\n\n此时可能产生冲突，用*git status*查看情况，再去文件修改解决冲突，用*git add <filename>*将冲突的文件标记为解决，再用*git status*确认冲突被解决，然后我们就可以用*git commit*提交了。\n\n当然除了分支，git还有很多功能（标签，撤销操作，版本回退），当有其他情况可以去查找命令，以上。 \n\n","source":"_posts/git学习记录.md","raw":"---\nlayout: title\ntitle: git学习记录\ndate: 2017-03-17 17:09:02\ncategories: Font-end\n---\n\n公司一直用的是**svn**（集中式版本控制系统 ），一般日常提交代码用**update**（从中央服务器上获取最新代码）和**commit**（将本地代码提交上去，提交前会用*Beyond Compare*软件对比修改一下）两个命令就能满足一般需求，偶尔会看一下日志，用一下版本回滚。但是最近搭博客，开始使用github，了解到**git**（分布式版本控制系统）好像很火？大家都在推荐，于是用了一下这个新工具。\n\n首先，如果你想详细了解git原理和使用，狠狠点击[这里](https://git-scm.com/book/en/v2)！此外，还有很多关于git不同风格的博客啊，比如[廖雪峰](http://www.liaoxuefeng.com)写的git教程。\n但是，如果你口味清奇有趣，可以选择[这个](http://learngitbranching.js.org/)，敲生动，适合食用！\n\n然后，列一下学习记录：\n\n先学点**简单**的：\n\n1.网上下载安装git，得到大礼包：**Git Bash**，**Git GUI**，**Git CMD**，一般操作使用**Git Bash**即可。\n2.本地新建文件，使用*git init*将它变成待用仓库。\n\n<!--more-->\n\n3.获取代码：\n\n``` dos\n\tgit clone <server url> \t\t\t//将远程仓库 上的代码拉到仓库中。\n``` \n\n4.修改代码后，这样提交它：\n\n``` dos\n\tgit add <filename>               //提交 到缓存区（index） \n``` \n\n或者使用：\n\n``` dos\n\tgit add  .                  \t//提交 所有改动文件到缓存区\n``` \n\n再将其提交到本地仓库中：\n\n``` dos\n    git commit -m \"修改信息\"     \t//提交到本地仓库中的HEAD上\n``` \n\n期间，你可以用*git status*查看文件变化。\n\n下图是我修改blog中的文件时，*git status*返回的文件状态\n<img src=\"../../../../assets/img/3-17-1.png\"   align=center />\n\n``` dos\n\tgit push origin master          //提交到远程仓库origin\n``` \n \n<img src=\"../../../../assets/img/3-17-2.png\"   align=center />\n\n如果你没有进行第3步，这里使用：\n\n``` dos\n\tgit remote add origin <server url>\t\t\t//提交到远程仓库\n``` \n\n5.我们经常要将远程仓库中的代码更新本地：\n\n``` dos\n\tgit pull\n``` \n\n满足基本的需求后，我们了解一下git的分支功能：\n\n1.创建、查看、切换分支：\n\n``` dos\n\tgit branch newbranch               //新建一个名newbranch的分支\n    git checkout -b newbranch     \t\t//新建一个名newbranch的分支并切换到新分支\n    git branch                         //查看分支\n    git checkout master                 //回到主分支master\n``` \n   \n然后就可以在确定的分支下操作（比如上方的基础操作）。\n\n2.进行分支间的操作，比如：\n\n``` dos\n\t git branch -d newbranch        //删除这个分支  \n     git merge <branchname>         //合并分支到当前分支\n``` \n\n来一张learngitbranch的图：\n<img src=\"../../../../assets/img/3-17-3.png\"   align=center />\n\n此时可能产生冲突，用*git status*查看情况，再去文件修改解决冲突，用*git add <filename>*将冲突的文件标记为解决，再用*git status*确认冲突被解决，然后我们就可以用*git commit*提交了。\n\n当然除了分支，git还有很多功能（标签，撤销操作，版本回退），当有其他情况可以去查找命令，以上。 \n\n","slug":"git学习记录","published":1,"updated":"2017-04-01T07:57:08.292Z","comments":1,"photos":[],"link":"","_id":"cj1oe2i2r000d9o9aqgy9tukz","content":"<p>公司一直用的是<strong>svn</strong>（集中式版本控制系统 ），一般日常提交代码用<strong>update</strong>（从中央服务器上获取最新代码）和<strong>commit</strong>（将本地代码提交上去，提交前会用<em>Beyond Compare</em>软件对比修改一下）两个命令就能满足一般需求，偶尔会看一下日志，用一下版本回滚。但是最近搭博客，开始使用github，了解到<strong>git</strong>（分布式版本控制系统）好像很火？大家都在推荐，于是用了一下这个新工具。</p>\n<p>首先，如果你想详细了解git原理和使用，狠狠点击<a href=\"https://git-scm.com/book/en/v2\" target=\"_blank\" rel=\"external\">这里</a>！此外，还有很多关于git不同风格的博客啊，比如<a href=\"http://www.liaoxuefeng.com\" target=\"_blank\" rel=\"external\">廖雪峰</a>写的git教程。<br>但是，如果你口味清奇有趣，可以选择<a href=\"http://learngitbranching.js.org/\" target=\"_blank\" rel=\"external\">这个</a>，敲生动，适合食用！</p>\n<p>然后，列一下学习记录：</p>\n<p>先学点<strong>简单</strong>的：</p>\n<p>1.网上下载安装git，得到大礼包：<strong>Git Bash</strong>，<strong>Git GUI</strong>，<strong>Git CMD</strong>，一般操作使用<strong>Git Bash</strong>即可。<br>2.本地新建文件，使用<em>git init</em>将它变成待用仓库。</p>\n<a id=\"more\"></a>\n<p>3.获取代码：</p>\n<pre><code class=\"dos\">git clone &lt;server url&gt;             //将远程仓库 上的代码拉到仓库中。\n</code></pre>\n<p>4.修改代码后，这样提交它：</p>\n<pre><code class=\"dos\">git add &lt;filename&gt;               //提交 到缓存区（index）\n</code></pre>\n<p>或者使用：</p>\n<pre><code class=\"dos\">git add  .                      //提交 所有改动文件到缓存区\n</code></pre>\n<p>再将其提交到本地仓库中：</p>\n<pre><code class=\"dos\">git commit -m \"修改信息\"         //提交到本地仓库中的HEAD上\n</code></pre>\n<p>期间，你可以用<em>git status</em>查看文件变化。</p>\n<p>下图是我修改blog中的文件时，<em>git status</em>返回的文件状态<br><img src=\"../../../../assets/img/3-17-1.png\" align=\"center\"></p>\n<pre><code class=\"dos\">git push origin master          //提交到远程仓库origin\n</code></pre>\n<p><img src=\"../../../../assets/img/3-17-2.png\" align=\"center\"></p>\n<p>如果你没有进行第3步，这里使用：</p>\n<pre><code class=\"dos\">git remote add origin &lt;server url&gt;            //提交到远程仓库\n</code></pre>\n<p>5.我们经常要将远程仓库中的代码更新本地：</p>\n<pre><code class=\"dos\">git pull\n</code></pre>\n<p>满足基本的需求后，我们了解一下git的分支功能：</p>\n<p>1.创建、查看、切换分支：</p>\n<pre><code class=\"dos\">git branch newbranch               //新建一个名newbranch的分支\ngit checkout -b newbranch             //新建一个名newbranch的分支并切换到新分支\ngit branch                         //查看分支\ngit checkout master                 //回到主分支master\n</code></pre>\n<p>然后就可以在确定的分支下操作（比如上方的基础操作）。</p>\n<p>2.进行分支间的操作，比如：</p>\n<pre><code class=\"dos\">git branch -d newbranch        //删除这个分支  \ngit merge &lt;branchname&gt;         //合并分支到当前分支\n</code></pre>\n<p>来一张learngitbranch的图：<br><img src=\"../../../../assets/img/3-17-3.png\" align=\"center\"></p>\n<p>此时可能产生冲突，用<em>git status</em>查看情况，再去文件修改解决冲突，用<em>git add <filename></filename></em>将冲突的文件标记为解决，再用<em>git status</em>确认冲突被解决，然后我们就可以用<em>git commit</em>提交了。</p>\n<p>当然除了分支，git还有很多功能（标签，撤销操作，版本回退），当有其他情况可以去查找命令，以上。 </p>\n","excerpt":"<p>公司一直用的是<strong>svn</strong>（集中式版本控制系统 ），一般日常提交代码用<strong>update</strong>（从中央服务器上获取最新代码）和<strong>commit</strong>（将本地代码提交上去，提交前会用<em>Beyond Compare</em>软件对比修改一下）两个命令就能满足一般需求，偶尔会看一下日志，用一下版本回滚。但是最近搭博客，开始使用github，了解到<strong>git</strong>（分布式版本控制系统）好像很火？大家都在推荐，于是用了一下这个新工具。</p>\n<p>首先，如果你想详细了解git原理和使用，狠狠点击<a href=\"https://git-scm.com/book/en/v2\">这里</a>！此外，还有很多关于git不同风格的博客啊，比如<a href=\"http://www.liaoxuefeng.com\">廖雪峰</a>写的git教程。<br>但是，如果你口味清奇有趣，可以选择<a href=\"http://learngitbranching.js.org/\">这个</a>，敲生动，适合食用！</p>\n<p>然后，列一下学习记录：</p>\n<p>先学点<strong>简单</strong>的：</p>\n<p>1.网上下载安装git，得到大礼包：<strong>Git Bash</strong>，<strong>Git GUI</strong>，<strong>Git CMD</strong>，一般操作使用<strong>Git Bash</strong>即可。<br>2.本地新建文件，使用<em>git init</em>将它变成待用仓库。</p>","more":"<p>3.获取代码：</p>\n<pre><code class=\"dos\">git clone &lt;server url&gt;             //将远程仓库 上的代码拉到仓库中。\n</code></pre>\n<p>4.修改代码后，这样提交它：</p>\n<pre><code class=\"dos\">git add &lt;filename&gt;               //提交 到缓存区（index）\n</code></pre>\n<p>或者使用：</p>\n<pre><code class=\"dos\">git add  .                      //提交 所有改动文件到缓存区\n</code></pre>\n<p>再将其提交到本地仓库中：</p>\n<pre><code class=\"dos\">git commit -m \"修改信息\"         //提交到本地仓库中的HEAD上\n</code></pre>\n<p>期间，你可以用<em>git status</em>查看文件变化。</p>\n<p>下图是我修改blog中的文件时，<em>git status</em>返回的文件状态<br><img src=\"../../../../assets/img/3-17-1.png\"   align=center /></p>\n<pre><code class=\"dos\">git push origin master          //提交到远程仓库origin\n</code></pre>\n<p><img src=\"../../../../assets/img/3-17-2.png\"   align=center /></p>\n<p>如果你没有进行第3步，这里使用：</p>\n<pre><code class=\"dos\">git remote add origin &lt;server url&gt;            //提交到远程仓库\n</code></pre>\n<p>5.我们经常要将远程仓库中的代码更新本地：</p>\n<pre><code class=\"dos\">git pull\n</code></pre>\n<p>满足基本的需求后，我们了解一下git的分支功能：</p>\n<p>1.创建、查看、切换分支：</p>\n<pre><code class=\"dos\">git branch newbranch               //新建一个名newbranch的分支\ngit checkout -b newbranch             //新建一个名newbranch的分支并切换到新分支\ngit branch                         //查看分支\ngit checkout master                 //回到主分支master\n</code></pre>\n<p>然后就可以在确定的分支下操作（比如上方的基础操作）。</p>\n<p>2.进行分支间的操作，比如：</p>\n<pre><code class=\"dos\">git branch -d newbranch        //删除这个分支  \ngit merge &lt;branchname&gt;         //合并分支到当前分支\n</code></pre>\n<p>来一张learngitbranch的图：<br><img src=\"../../../../assets/img/3-17-3.png\"   align=center /></p>\n<p>此时可能产生冲突，用<em>git status</em>查看情况，再去文件修改解决冲突，用<em>git add <filename></em>将冲突的文件标记为解决，再用<em>git status</em>确认冲突被解决，然后我们就可以用<em>git commit</em>提交了。</p>\n<p>当然除了分支，git还有很多功能（标签，撤销操作，版本回退），当有其他情况可以去查找命令，以上。 </p>"},{"title":"去掉jQuery","date":"2017-04-01T07:59:49.000Z","_content":"一直在Angular中混用jQuery，用来操作DOM，因为它(wo)很(tai)方(nian)便(qing)，最近将jQuery从项目中移除了，将所有涉及到jQuery操作换为用angular提供的api或原生js来实现......虽然jQuery压缩过才100kb左右。\n1.Angular内置jqLite，封装了部分操作DOM的api，使用angular.element(ele)相当于jQuery中的$,具体使用见官方[文档](https://code.angularjs.org/1.5.4/docs/api/ng/function/angular.element)。\n因此我们所使用的jQuery选择器，例如：\n``` javascript\n$(\"#empl-name\").val();\n``` \n可以换成：\n``` javascript\nangular.element(document.querySelector(\"#empl-name\"));\n``` \n使用document.querySelector 的原因官方文档中有说明:\n\n<img src=\"../../../../assets/img/4-1-1.png\"   align=center />\n\n<!--more-->\n\n2.替换掉使用jQuery的插件。\n例如，使用的jQuery的tooltip组件插件，现在换成ui bootstrap中的tooltip组件。\n原来引入jQuery tooltip插件代码后，封装成指令：\n``` javascript\n\"use strict\";\nvar moduleName=\"kass.widget.tooltip\";\nangular.module(moduleName,[])\n.directive(\"tooltip\",[function(){\n\treturn{\n\t\trestrict : \"A\",\n\t\tlink : function(scope, element, attrs){//element:指令标签对象     attrs:指令属性\n\t\t\tvar opts ={\n\t\t\t\t//将带有tooltip属性的\"Target element\"传给插件创建tooltip\n\t\t\t\tformatter: function(scope){\n\t\t\t\t\treturn scope.$target.attr(\"tooltip\");//$target是利用$(this)封装的jquery对象\n\t\t\t\t},\n\t\t\t\t//插件提供的tooltip属性值direction与指令属性tooltipDirection\n\t\t\t\tdirection : attrs.tooltipDirection ? attrs.tooltipDirection : \"bottom\"\n\t\t\t};\n\t\t\t//插件提供的tipper方法设置tooltip属性值\n\t\t\telement.tipper(opts);\n\t\t\telement.one(\"$destroy\",function(){\n\t\t\t\telement.tipper(\"destroy\");\n\t\t\t});\n\t\t}\n\t}\n}]);\nmodule.exports=moduleName;\n``` \n引入ui bootstrap 中的tooptip部分：\n\n``` javascript\nrequire(\"./position\");//ui bootstrap的position部分\nrequire(\"./stackedMap\");//ui bootstrap的stackedMap部分\nangular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap',\"uib/template/tooltip/tooltip-html-popup.html\",\"uib/template/tooltip/tooltip-popup.html\",\"uib/template/tooltip/tooltip-template-popup.html\"])     \n.provider('$uibTooltip', function(){........})\n......\n.directive('uibTooltipTemplatePopup', function() {\n  return {\n    restrict: 'A',\n    scope: { contentExp: '&', originScope: '&' },\n    templateUrl: 'uib/template/tooltip/tooltip-template-popup.html'\n  };\n});\n......\nangular.module(\"uib/template/tooltip/tooltip-popup.html\", []).run(......);\n......\nangular.module('ui.bootstrap.tooltip').run(......);\n``` \n发现github上的一个封装angular tooltip的[项目](https://github.com/720kb/angular-tooltips),使用方便有demo,⊙o⊙......\n\n3.jQuery的动画部分。\n一些动画可以直接使用css的animation、transition属性进行设置，还可以使用angular提供的动画。\n例如jQuery一个简单的改变位置动画，需要在动画完成后移除这个指令组件：\n\n``` javascript\n$(\".side-modal\").animate({right:'-100%'},300,function(){\n\t$scope.$apply(function(){\n\t\t$scope.onRemove();\n\t});\n});\n``` \n使用angular的动画，要引入angular-animate.js文件，注入ngAnimate：\n\n``` javascript\n\"use strict\";\nrequire(\"./angular-animte-min\");\nvar moduleName = \"animateTest\";\nangular.module(moduleName,[\"ngAnimate\"])\n.directive(myTest,[\"$animate\",function(\"$animate\"){\n    return{\n        restrict : \"AE\",\n        replace : false,\n        scope : {\n            onRemove : \"&\"\n        },\n        template : require(\"html!../template/to/mytest.html\"),\n        controller : [\"$scope\",function($scope){\n            ......\n            var slideBox = angular.element(document.querySelector(\".side-modal\"));\n            $animate.addClass(slideBox,'set-right',function(){\n                $scope.onRemove();//callback,动画完成后移除指令\n            });\n            ......\n        }],\n        link:function(scope,element,attrs){......}\n    }\n}]);\nmodule.exports=moduleName;\n``` \n4.其他部分可以参考github上的一个项目：[You Don't Need jQuery]( https://github.com/oneuijs/You-Dont-Need-jQuery)。\n\n\n************\n\n<font color=red>April Fool's Day </font>....⊙o⊙....","source":"_posts/去掉jQuery.md","raw":"---\ntitle: 去掉jQuery\ndate: 2017-04-01 15:59:49\ncategories: Font-end\ntags: JavaScript\n---\n一直在Angular中混用jQuery，用来操作DOM，因为它(wo)很(tai)方(nian)便(qing)，最近将jQuery从项目中移除了，将所有涉及到jQuery操作换为用angular提供的api或原生js来实现......虽然jQuery压缩过才100kb左右。\n1.Angular内置jqLite，封装了部分操作DOM的api，使用angular.element(ele)相当于jQuery中的$,具体使用见官方[文档](https://code.angularjs.org/1.5.4/docs/api/ng/function/angular.element)。\n因此我们所使用的jQuery选择器，例如：\n``` javascript\n$(\"#empl-name\").val();\n``` \n可以换成：\n``` javascript\nangular.element(document.querySelector(\"#empl-name\"));\n``` \n使用document.querySelector 的原因官方文档中有说明:\n\n<img src=\"../../../../assets/img/4-1-1.png\"   align=center />\n\n<!--more-->\n\n2.替换掉使用jQuery的插件。\n例如，使用的jQuery的tooltip组件插件，现在换成ui bootstrap中的tooltip组件。\n原来引入jQuery tooltip插件代码后，封装成指令：\n``` javascript\n\"use strict\";\nvar moduleName=\"kass.widget.tooltip\";\nangular.module(moduleName,[])\n.directive(\"tooltip\",[function(){\n\treturn{\n\t\trestrict : \"A\",\n\t\tlink : function(scope, element, attrs){//element:指令标签对象     attrs:指令属性\n\t\t\tvar opts ={\n\t\t\t\t//将带有tooltip属性的\"Target element\"传给插件创建tooltip\n\t\t\t\tformatter: function(scope){\n\t\t\t\t\treturn scope.$target.attr(\"tooltip\");//$target是利用$(this)封装的jquery对象\n\t\t\t\t},\n\t\t\t\t//插件提供的tooltip属性值direction与指令属性tooltipDirection\n\t\t\t\tdirection : attrs.tooltipDirection ? attrs.tooltipDirection : \"bottom\"\n\t\t\t};\n\t\t\t//插件提供的tipper方法设置tooltip属性值\n\t\t\telement.tipper(opts);\n\t\t\telement.one(\"$destroy\",function(){\n\t\t\t\telement.tipper(\"destroy\");\n\t\t\t});\n\t\t}\n\t}\n}]);\nmodule.exports=moduleName;\n``` \n引入ui bootstrap 中的tooptip部分：\n\n``` javascript\nrequire(\"./position\");//ui bootstrap的position部分\nrequire(\"./stackedMap\");//ui bootstrap的stackedMap部分\nangular.module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap',\"uib/template/tooltip/tooltip-html-popup.html\",\"uib/template/tooltip/tooltip-popup.html\",\"uib/template/tooltip/tooltip-template-popup.html\"])     \n.provider('$uibTooltip', function(){........})\n......\n.directive('uibTooltipTemplatePopup', function() {\n  return {\n    restrict: 'A',\n    scope: { contentExp: '&', originScope: '&' },\n    templateUrl: 'uib/template/tooltip/tooltip-template-popup.html'\n  };\n});\n......\nangular.module(\"uib/template/tooltip/tooltip-popup.html\", []).run(......);\n......\nangular.module('ui.bootstrap.tooltip').run(......);\n``` \n发现github上的一个封装angular tooltip的[项目](https://github.com/720kb/angular-tooltips),使用方便有demo,⊙o⊙......\n\n3.jQuery的动画部分。\n一些动画可以直接使用css的animation、transition属性进行设置，还可以使用angular提供的动画。\n例如jQuery一个简单的改变位置动画，需要在动画完成后移除这个指令组件：\n\n``` javascript\n$(\".side-modal\").animate({right:'-100%'},300,function(){\n\t$scope.$apply(function(){\n\t\t$scope.onRemove();\n\t});\n});\n``` \n使用angular的动画，要引入angular-animate.js文件，注入ngAnimate：\n\n``` javascript\n\"use strict\";\nrequire(\"./angular-animte-min\");\nvar moduleName = \"animateTest\";\nangular.module(moduleName,[\"ngAnimate\"])\n.directive(myTest,[\"$animate\",function(\"$animate\"){\n    return{\n        restrict : \"AE\",\n        replace : false,\n        scope : {\n            onRemove : \"&\"\n        },\n        template : require(\"html!../template/to/mytest.html\"),\n        controller : [\"$scope\",function($scope){\n            ......\n            var slideBox = angular.element(document.querySelector(\".side-modal\"));\n            $animate.addClass(slideBox,'set-right',function(){\n                $scope.onRemove();//callback,动画完成后移除指令\n            });\n            ......\n        }],\n        link:function(scope,element,attrs){......}\n    }\n}]);\nmodule.exports=moduleName;\n``` \n4.其他部分可以参考github上的一个项目：[You Don't Need jQuery]( https://github.com/oneuijs/You-Dont-Need-jQuery)。\n\n\n************\n\n<font color=red>April Fool's Day </font>....⊙o⊙....","slug":"去掉jQuery","published":1,"updated":"2017-04-06T11:11:47.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1oe2i2s000e9o9a44lf1ieg","content":"<p>一直在Angular中混用jQuery，用来操作DOM，因为它(wo)很(tai)方(nian)便(qing)，最近将jQuery从项目中移除了，将所有涉及到jQuery操作换为用angular提供的api或原生js来实现……虽然jQuery压缩过才100kb左右。<br>1.Angular内置jqLite，封装了部分操作DOM的api，使用angular.element(ele)相当于jQuery中的$,具体使用见官方<a href=\"https://code.angularjs.org/1.5.4/docs/api/ng/function/angular.element\" target=\"_blank\" rel=\"external\">文档</a>。<br>因此我们所使用的jQuery选择器，例如：</p>\n<pre><code class=\"javascript\">$(<span class=\"string\">\"#empl-name\"</span>).val();\n</code></pre>\n<p>可以换成：</p>\n<pre><code class=\"javascript\">angular.element(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#empl-name\"</span>));\n</code></pre>\n<p>使用document.querySelector 的原因官方文档中有说明:</p>\n<p><img src=\"../../../../assets/img/4-1-1.png\" align=\"center\"></p>\n<a id=\"more\"></a>\n<p>2.替换掉使用jQuery的插件。<br>例如，使用的jQuery的tooltip组件插件，现在换成ui bootstrap中的tooltip组件。<br>原来引入jQuery tooltip插件代码后，封装成指令：</p>\n<pre><code class=\"javascript\"><span class=\"meta\">\"use strict\"</span>;\n<span class=\"keyword\">var</span> moduleName=<span class=\"string\">\"kass.widget.tooltip\"</span>;\nangular.module(moduleName,[])\n.directive(<span class=\"string\">\"tooltip\"</span>,[<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"keyword\">return</span>{\n        <span class=\"attr\">restrict</span> : <span class=\"string\">\"A\"</span>,\n        <span class=\"attr\">link</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>)</span>{<span class=\"comment\">//element:指令标签对象     attrs:指令属性</span>\n            <span class=\"keyword\">var</span> opts ={\n                <span class=\"comment\">//将带有tooltip属性的\"Target element\"传给插件创建tooltip</span>\n                formatter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope</span>)</span>{\n                    <span class=\"keyword\">return</span> scope.$target.attr(<span class=\"string\">\"tooltip\"</span>);<span class=\"comment\">//$target是利用$(this)封装的jquery对象</span>\n                },\n                <span class=\"comment\">//插件提供的tooltip属性值direction与指令属性tooltipDirection</span>\n                direction : attrs.tooltipDirection ? attrs.tooltipDirection : <span class=\"string\">\"bottom\"</span>\n            };\n            <span class=\"comment\">//插件提供的tipper方法设置tooltip属性值</span>\n            element.tipper(opts);\n            element.one(<span class=\"string\">\"$destroy\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n                element.tipper(<span class=\"string\">\"destroy\"</span>);\n            });\n        }\n    }\n}]);\n<span class=\"built_in\">module</span>.exports=moduleName;\n</code></pre>\n<p>引入ui bootstrap 中的tooptip部分：</p>\n<pre><code class=\"javascript\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./position\"</span>);<span class=\"comment\">//ui bootstrap的position部分</span>\n<span class=\"built_in\">require</span>(<span class=\"string\">\"./stackedMap\"</span>);<span class=\"comment\">//ui bootstrap的stackedMap部分</span>\nangular.module(<span class=\"string\">'ui.bootstrap.tooltip'</span>, [<span class=\"string\">'ui.bootstrap.position'</span>, <span class=\"string\">'ui.bootstrap.stackedMap'</span>,<span class=\"string\">\"uib/template/tooltip/tooltip-html-popup.html\"</span>,<span class=\"string\">\"uib/template/tooltip/tooltip-popup.html\"</span>,<span class=\"string\">\"uib/template/tooltip/tooltip-template-popup.html\"</span>])     \n.provider(<span class=\"string\">'$uibTooltip'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{........})\n......\n.directive(<span class=\"string\">'uibTooltipTemplatePopup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">return</span> {\n    <span class=\"attr\">restrict</span>: <span class=\"string\">'A'</span>,\n    <span class=\"attr\">scope</span>: { <span class=\"attr\">contentExp</span>: <span class=\"string\">'&amp;'</span>, <span class=\"attr\">originScope</span>: <span class=\"string\">'&amp;'</span> },\n    <span class=\"attr\">templateUrl</span>: <span class=\"string\">'uib/template/tooltip/tooltip-template-popup.html'</span>\n  };\n});\n......\nangular.module(<span class=\"string\">\"uib/template/tooltip/tooltip-popup.html\"</span>, []).run(......);\n......\nangular.module(<span class=\"string\">'ui.bootstrap.tooltip'</span>).run(......);\n</code></pre>\n<p>发现github上的一个封装angular tooltip的<a href=\"https://github.com/720kb/angular-tooltips\" target=\"_blank\" rel=\"external\">项目</a>,使用方便有demo,⊙o⊙……</p>\n<p>3.jQuery的动画部分。<br>一些动画可以直接使用css的animation、transition属性进行设置，还可以使用angular提供的动画。<br>例如jQuery一个简单的改变位置动画，需要在动画完成后移除这个指令组件：</p>\n<pre><code class=\"javascript\">$(<span class=\"string\">\".side-modal\"</span>).animate({<span class=\"attr\">right</span>:<span class=\"string\">'-100%'</span>},<span class=\"number\">300</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n    $scope.$apply(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n        $scope.onRemove();\n    });\n});\n</code></pre>\n<p>使用angular的动画，要引入angular-animate.js文件，注入ngAnimate：</p>\n<pre><code class=\"javascript\"><span class=\"meta\">\"use strict\"</span>;\n<span class=\"built_in\">require</span>(<span class=\"string\">\"./angular-animte-min\"</span>);\n<span class=\"keyword\">var</span> moduleName = <span class=\"string\">\"animateTest\"</span>;\nangular.module(moduleName,[<span class=\"string\">\"ngAnimate\"</span>])\n.directive(myTest,[<span class=\"string\">\"$animate\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"string\">\"$animate\"</span></span>)</span>{\n    <span class=\"keyword\">return</span>{\n        <span class=\"attr\">restrict</span> : <span class=\"string\">\"AE\"</span>,\n        <span class=\"attr\">replace</span> : <span class=\"literal\">false</span>,\n        <span class=\"attr\">scope</span> : {\n            <span class=\"attr\">onRemove</span> : <span class=\"string\">\"&amp;\"</span>\n        },\n        <span class=\"attr\">template</span> : <span class=\"built_in\">require</span>(<span class=\"string\">\"html!../template/to/mytest.html\"</span>),\n        <span class=\"attr\">controller</span> : [<span class=\"string\">\"$scope\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>{\n            ......\n            var slideBox = angular.element(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".side-modal\"</span>));\n            $animate.addClass(slideBox,<span class=\"string\">'set-right'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n                $scope.onRemove();<span class=\"comment\">//callback,动画完成后移除指令</span>\n            });\n            ......\n        }],\n        <span class=\"attr\">link</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope,element,attrs</span>)</span>{......}\n    }\n}]);\n<span class=\"built_in\">module</span>.exports=moduleName;\n</code></pre>\n<p>4.其他部分可以参考github上的一个项目：<a href=\"https://github.com/oneuijs/You-Dont-Need-jQuery\" target=\"_blank\" rel=\"external\">You Don’t Need jQuery</a>。</p>\n<hr>\n<p><font color=\"red\">April Fool’s Day </font>….⊙o⊙….</p>\n","excerpt":"<p>一直在Angular中混用jQuery，用来操作DOM，因为它(wo)很(tai)方(nian)便(qing)，最近将jQuery从项目中移除了，将所有涉及到jQuery操作换为用angular提供的api或原生js来实现……虽然jQuery压缩过才100kb左右。<br>1.Angular内置jqLite，封装了部分操作DOM的api，使用angular.element(ele)相当于jQuery中的$,具体使用见官方<a href=\"https://code.angularjs.org/1.5.4/docs/api/ng/function/angular.element\">文档</a>。<br>因此我们所使用的jQuery选择器，例如：</p>\n<pre><code class=\"javascript\">$(<span class=\"string\">\"#empl-name\"</span>).val();\n</code></pre>\n<p>可以换成：</p>\n<pre><code class=\"javascript\">angular.element(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#empl-name\"</span>));\n</code></pre>\n<p>使用document.querySelector 的原因官方文档中有说明:</p>\n<p><img src=\"../../../../assets/img/4-1-1.png\"   align=center /></p>","more":"<p>2.替换掉使用jQuery的插件。<br>例如，使用的jQuery的tooltip组件插件，现在换成ui bootstrap中的tooltip组件。<br>原来引入jQuery tooltip插件代码后，封装成指令：</p>\n<pre><code class=\"javascript\"><span class=\"meta\">\"use strict\"</span>;\n<span class=\"keyword\">var</span> moduleName=<span class=\"string\">\"kass.widget.tooltip\"</span>;\nangular.module(moduleName,[])\n.directive(<span class=\"string\">\"tooltip\"</span>,[<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n    <span class=\"keyword\">return</span>{\n        <span class=\"attr\">restrict</span> : <span class=\"string\">\"A\"</span>,\n        <span class=\"attr\">link</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>)</span>{<span class=\"comment\">//element:指令标签对象     attrs:指令属性</span>\n            <span class=\"keyword\">var</span> opts ={\n                <span class=\"comment\">//将带有tooltip属性的\"Target element\"传给插件创建tooltip</span>\n                formatter: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope</span>)</span>{\n                    <span class=\"keyword\">return</span> scope.$target.attr(<span class=\"string\">\"tooltip\"</span>);<span class=\"comment\">//$target是利用$(this)封装的jquery对象</span>\n                },\n                <span class=\"comment\">//插件提供的tooltip属性值direction与指令属性tooltipDirection</span>\n                direction : attrs.tooltipDirection ? attrs.tooltipDirection : <span class=\"string\">\"bottom\"</span>\n            };\n            <span class=\"comment\">//插件提供的tipper方法设置tooltip属性值</span>\n            element.tipper(opts);\n            element.one(<span class=\"string\">\"$destroy\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n                element.tipper(<span class=\"string\">\"destroy\"</span>);\n            });\n        }\n    }\n}]);\n<span class=\"built_in\">module</span>.exports=moduleName;\n</code></pre>\n<p>引入ui bootstrap 中的tooptip部分：</p>\n<pre><code class=\"javascript\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./position\"</span>);<span class=\"comment\">//ui bootstrap的position部分</span>\n<span class=\"built_in\">require</span>(<span class=\"string\">\"./stackedMap\"</span>);<span class=\"comment\">//ui bootstrap的stackedMap部分</span>\nangular.module(<span class=\"string\">'ui.bootstrap.tooltip'</span>, [<span class=\"string\">'ui.bootstrap.position'</span>, <span class=\"string\">'ui.bootstrap.stackedMap'</span>,<span class=\"string\">\"uib/template/tooltip/tooltip-html-popup.html\"</span>,<span class=\"string\">\"uib/template/tooltip/tooltip-popup.html\"</span>,<span class=\"string\">\"uib/template/tooltip/tooltip-template-popup.html\"</span>])     \n.provider(<span class=\"string\">'$uibTooltip'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{........})\n......\n.directive(<span class=\"string\">'uibTooltipTemplatePopup'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>{\n  <span class=\"keyword\">return</span> {\n    <span class=\"attr\">restrict</span>: <span class=\"string\">'A'</span>,\n    <span class=\"attr\">scope</span>: { <span class=\"attr\">contentExp</span>: <span class=\"string\">'&amp;'</span>, <span class=\"attr\">originScope</span>: <span class=\"string\">'&amp;'</span> },\n    <span class=\"attr\">templateUrl</span>: <span class=\"string\">'uib/template/tooltip/tooltip-template-popup.html'</span>\n  };\n});\n......\nangular.module(<span class=\"string\">\"uib/template/tooltip/tooltip-popup.html\"</span>, []).run(......);\n......\nangular.module(<span class=\"string\">'ui.bootstrap.tooltip'</span>).run(......);\n</code></pre>\n<p>发现github上的一个封装angular tooltip的<a href=\"https://github.com/720kb/angular-tooltips\">项目</a>,使用方便有demo,⊙o⊙……</p>\n<p>3.jQuery的动画部分。<br>一些动画可以直接使用css的animation、transition属性进行设置，还可以使用angular提供的动画。<br>例如jQuery一个简单的改变位置动画，需要在动画完成后移除这个指令组件：</p>\n<pre><code class=\"javascript\">$(<span class=\"string\">\".side-modal\"</span>).animate({<span class=\"attr\">right</span>:<span class=\"string\">'-100%'</span>},<span class=\"number\">300</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n    $scope.$apply(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n        $scope.onRemove();\n    });\n});\n</code></pre>\n<p>使用angular的动画，要引入angular-animate.js文件，注入ngAnimate：</p>\n<pre><code class=\"javascript\"><span class=\"meta\">\"use strict\"</span>;\n<span class=\"built_in\">require</span>(<span class=\"string\">\"./angular-animte-min\"</span>);\n<span class=\"keyword\">var</span> moduleName = <span class=\"string\">\"animateTest\"</span>;\nangular.module(moduleName,[<span class=\"string\">\"ngAnimate\"</span>])\n.directive(myTest,[<span class=\"string\">\"$animate\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"string\">\"$animate\"</span></span>)</span>{\n    <span class=\"keyword\">return</span>{\n        <span class=\"attr\">restrict</span> : <span class=\"string\">\"AE\"</span>,\n        <span class=\"attr\">replace</span> : <span class=\"literal\">false</span>,\n        <span class=\"attr\">scope</span> : {\n            <span class=\"attr\">onRemove</span> : <span class=\"string\">\"&amp;\"</span>\n        },\n        <span class=\"attr\">template</span> : <span class=\"built_in\">require</span>(<span class=\"string\">\"html!../template/to/mytest.html\"</span>),\n        <span class=\"attr\">controller</span> : [<span class=\"string\">\"$scope\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>{\n            ......\n            var slideBox = angular.element(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\".side-modal\"</span>));\n            $animate.addClass(slideBox,<span class=\"string\">'set-right'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>{\n                $scope.onRemove();<span class=\"comment\">//callback,动画完成后移除指令</span>\n            });\n            ......\n        }],\n        <span class=\"attr\">link</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope,element,attrs</span>)</span>{......}\n    }\n}]);\n<span class=\"built_in\">module</span>.exports=moduleName;\n</code></pre>\n<p>4.其他部分可以参考github上的一个项目：<a href=\"https://github.com/oneuijs/You-Dont-Need-jQuery\">You Don’t Need jQuery</a>。</p>\n<hr>\n<p><font color=red>April Fool’s Day </font>….⊙o⊙….</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1oe2i0p00009o9a7wby3280","category_id":"cj1oe2i0u00029o9aj52715bi","_id":"cj1oe2i0z00079o9a2u1x55vd"},{"post_id":"cj1oe2i0s00019o9a6rl8tg6z","category_id":"cj1oe2i0x00049o9aetkqlamq","_id":"cj1oe2i0z00099o9ac1ogj9cb"},{"post_id":"cj1oe2i26000a9o9a0y1xh97d","category_id":"cj1oe2i0u00029o9aj52715bi","_id":"cj1oe2i2c000b9o9ah5k6ou9n"},{"post_id":"cj1oe2i2q000c9o9avq0u0f6m","category_id":"cj1oe2i0x00049o9aetkqlamq","_id":"cj1oe2i2w000f9o9aoxvm7we8"},{"post_id":"cj1oe2i2r000d9o9aqgy9tukz","category_id":"cj1oe2i0x00049o9aetkqlamq","_id":"cj1oe2i2z000h9o9a44km6h5t"},{"post_id":"cj1oe2i2s000e9o9a44lf1ieg","category_id":"cj1oe2i0x00049o9aetkqlamq","_id":"cj1oe2i2z000i9o9aiqgset0y"}],"PostTag":[{"post_id":"cj1oe2i0p00009o9a7wby3280","tag_id":"cj1oe2i0x00039o9afd86rsgv","_id":"cj1oe2i0y00069o9ayrv546yn"},{"post_id":"cj1oe2i0s00019o9a6rl8tg6z","tag_id":"cj1oe2i0y00059o9a85wafv58","_id":"cj1oe2i0z00089o9aald126oh"},{"post_id":"cj1oe2i2s000e9o9a44lf1ieg","tag_id":"cj1oe2i0y00059o9a85wafv58","_id":"cj1oe2i2y000g9o9aqcb4jrz5"}],"Tag":[{"name":"WPF","_id":"cj1oe2i0x00039o9afd86rsgv"},{"name":"JavaScript","_id":"cj1oe2i0y00059o9a85wafv58"}]}}