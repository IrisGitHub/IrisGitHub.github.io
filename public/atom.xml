<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Iris&#39; Blog</title>
  <subtitle>step by step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://irisgithub.github.io/"/>
  <updated>2017-06-12T11:57:45.043Z</updated>
  <id>https://irisgithub.github.io/</id>
  
  <author>
    <name>Iris</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>入坑Vue.js</title>
    <link href="https://irisgithub.github.io/2017/05/26/%E5%85%A5%E5%9D%91Vue-js/"/>
    <id>https://irisgithub.github.io/2017/05/26/入坑Vue-js/</id>
    <published>2017-05-26T01:41:27.000Z</published>
    <updated>2017-06-12T11:57:45.043Z</updated>
    
    <content type="html"><![CDATA[<p>   又有一个多月没写博客了，这篇记录一下最近一个月忙的事情——将使用AngularJS(v1.5.4)框架写的后台换成Vue.js(v2.2.6)啦~巨开心！<br>至于我为什么换,大概是因为每次版本迭代不想按原来的方式改写一遍？时间还算充足？浏览器支持很宽松？想体验ES6写法？听说Vue很棒棒哇？想集齐四大法宝(JQuery/AngularJS/Vue.js/React)……主要原因应该是后台就我一个人在做，想怎么做就怎么做吧~哈哈= =<br>Vue框架使用非常方便，一如它所宣称的轻量高效。而且它的<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="external">官方文档</a>超级清晰，<a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="external">api</a>对于本菜来说也够用。之前用过几个月的Angular,文档到现在还没有全部看完（嗯，可能我比较懒…但它的东西真的多的不要不要的），但是Vue,它的文档我已经刷了好几遍（闲来无事刷文档）= =对于我这种准备学习一门语言或框架之前往往需要先完完整整过一两遍比较全的书或文档，才能放心开始学习的人来说，简直不要太棒！嗯，少说废话，进入正题。<br>首先搭一个框架，做好准备工作。用vue-cli脚手架工具(npm install vue-cli -g)，初始化项目(vue init webpack-simple admin)很快得到admin项目下的完整目录：</p>
<p><img src="../../../../assets/img/5-31-1.png" align="center"></p>
<a id="more"></a>
<p>详细的网上有教程，其中build和config里面放的是一些配置文件(主要是webpack的，用于打包),dist中放的是开发好的目录，如果要直接放在服务器中访问，需要简单修改一下config文件中的index.js,static放静态资源，src就是我们的开发目录啦。<br>除了vue-cli帮我们安装的一些npm包，由于项目需要，另外引入一些工具</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">"dependencies": &#123;</div><div class="line">  // 解决http请求</div><div class="line">  "axios": "^0.16.1",</div><div class="line">  // 解决Babel对于一些api(如Promise等)不转码的问题</div><div class="line">  "babel-polyfill": "^6.23.0",</div><div class="line">  // 强大的时间操作工具</div><div class="line">  "moment": "^2.18.1",</div><div class="line">  // 简单的tooltip</div><div class="line">  "v-tooltip": "^2.0.0-beta.4",</div><div class="line">  "vue": "^2.2.6",</div><div class="line">  // vue 官方路由</div><div class="line">  "vue-router": "^2.3.1",</div><div class="line">  // vue官方状态管理模式</div><div class="line">  "vuex": "^2.3.1"</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<p>其中，<a href="https://vuex.vuejs.org/zh-cn/getting-started.html" target="_blank" rel="external">vuex</a>和<a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="external">vue-router</a>都有官方文档，十分详细。引入axios是因为vue不像angular，angular提供的$http服务同服务端通信，相比vue-resource,官方推荐强大的axios！用上babel-polyfill工具，因为想使用一些ES6新的api，真想把它们统统都夸一遍 = =<br>看一下项目目录：</p>
<p><img src="../../../../assets/img/5-31-2.png" align="center"></p>
<p>component: 一些组件(toast,tree,modal,avatar),由于不想引入大而全的库(很多东西不需要)，模式组件源于自己写写改改。<br>directive: 一些指令(v-focus)<br>filter: 一些过滤器(时间、文件大小，操作记录等等)，另外，可直接在组件内部使用computed,有时候它更好用。<br>libs: 一些工具，引用库<br>router: 配置vue路由<br>service: 所有http请求，按照原来在angular框架时师傅教的，将所有api独立出来，感觉好写好改好查找。<br>store: vue的状态管理，我主要放了个人信息和组织结构树信息，方便管理数据<br>views: 所有路由页(因为在做单页应用，在只用component还是用部分router两种模式比较了一下，发现都差不多，为了用上全家桶，用上router)<br>展开的就不放了，因为文件特别多 = =<br>一个简单的component样式：</p>
<p><img src="../../../../assets/img/5-31-3.png" align="center"></p>
<p><img src="../../../../assets/img/5-31-4.png" align="center"></p>
<p>未完，待续……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   又有一个多月没写博客了，这篇记录一下最近一个月忙的事情——将使用AngularJS(v1.5.4)框架写的后台换成Vue.js(v2.2.6)啦~巨开心！&lt;br&gt;至于我为什么换,大概是因为每次版本迭代不想按原来的方式改写一遍？时间还算充足？浏览器支持很宽松？想体验ES6写法？听说Vue很棒棒哇？想集齐四大法宝(JQuery/AngularJS/Vue.js/React)……主要原因应该是后台就我一个人在做，想怎么做就怎么做吧~哈哈= =&lt;br&gt;Vue框架使用非常方便，一如它所宣称的轻量高效。而且它的&lt;a href=&quot;https://cn.vuejs.org/v2/guide/&quot;&gt;官方文档&lt;/a&gt;超级清晰，&lt;a href=&quot;https://cn.vuejs.org/v2/api/&quot;&gt;api&lt;/a&gt;对于本菜来说也够用。之前用过几个月的Angular,文档到现在还没有全部看完（嗯，可能我比较懒…但它的东西真的多的不要不要的），但是Vue,它的文档我已经刷了好几遍（闲来无事刷文档）= =对于我这种准备学习一门语言或框架之前往往需要先完完整整过一两遍比较全的书或文档，才能放心开始学习的人来说，简直不要太棒！嗯，少说废话，进入正题。&lt;br&gt;首先搭一个框架，做好准备工作。用vue-cli脚手架工具(npm install vue-cli -g)，初始化项目(vue init webpack-simple admin)很快得到admin项目下的完整目录：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../assets/img/5-31-1.png&quot;   align=center /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Font-end" scheme="https://irisgithub.github.io/categories/font-end/"/>
    
    
      <category term="JavaScript" scheme="https://irisgithub.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>一次http请求</title>
    <link href="https://irisgithub.github.io/2017/04/17/%E4%B8%80%E6%AC%A1http%E8%AF%B7%E6%B1%82/"/>
    <id>https://irisgithub.github.io/2017/04/17/一次http请求/</id>
    <published>2017-04-17T10:13:27.000Z</published>
    <updated>2017-05-05T03:19:23.085Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有写博客了，记录几天前的一个bug，顺便回顾一些之前学的HTTP知识。<br>客户之前要求浏览器支持360和chrome，对版本没有什么要求。想到360极速模式使用的webkit内核，平常代码运行在又chrome上，我感觉可以任性了！但是最近客户改需求需要运行在IE10及以上，小伙伴们开始在IE10上测试。其中一处bug：某次HTTP 请求在chrome上返回200，但在IE10上返回401。<br>在chrome中运行，HTTP 请求详细信息截图如下：</p>
<p><img src="../../../../assets/img/4-17-1.png" align="center"></p>
<a id="more"></a>
<p>在IE10下HTTP请求响应码返回401，表示身份信息有问题，请求失败：</p>
<p><img src="../../../../assets/img/4-17-2.png" align="center"></p>
<p>查看request header：</p>
<p><img src="../../../../assets/img/4-17-3.png" align="center"></p>
<p>发现设置在headers中的的authorization字段不见了，在chrome上存在authorization 字段,那么IE10上应该存在，为什么找不到？看到桌面绿色的fiddler，想到它可以抓到很多HTTP 信息，可能会得到其他有用的信息。<br>运行fiddler ，找到目标session：</p>
<p><img src="../../../../assets/img/4-17-4.png" align="center"></p>
<p>得到IE10下详细的返回信息：</p>
<p><img src="../../../../assets/img/4-17-5.png" align="center"></p>
<p>所以，authorization还是有的，只是IE10没有显示出来，而且变成了Authorization，首字母大写；应该是后端验证出现问题，将bug报给后端被解决。</p>
<h4 id="HTTP基础知识-HTTP-basics"><a href="#HTTP基础知识-HTTP-basics" class="headerlink" title="HTTP基础知识(HTTP basics)"></a>HTTP基础知识(<a href="https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html" target="_blank" rel="external">HTTP basics</a>)</h4><p>一次完整的请求过程：<br>1.域名解析<br>2.建立TCP连接，三次握手<br>3.Web浏览器向Web服务端发送HTTP请求报文<br>4.浏览器解析HTML代码，并请求HTML代码中的资源<br>6.浏览器对页面进行渲染呈献给用户<br>7.断开TCP连接</p>
<h4 id="HTTP的请求方法-HTTP-1-1-Method-Definitions"><a href="#HTTP的请求方法-HTTP-1-1-Method-Definitions" class="headerlink" title="HTTP的请求方法(HTTP/1.1: Method Definitions)"></a>HTTP的请求方法(<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank" rel="external">HTTP/1.1: Method Definitions</a>)</h4><p>一些get请求方式：1. 直接输入某个地址 2. 点击链接 3. 表单默认提交方式</p>
<h4 id="关于HTTP-响应码-HTTP-Status-Code"><a href="#关于HTTP-响应码-HTTP-Status-Code" class="headerlink" title="关于HTTP 响应码(HTTP Status Code )"></a>关于HTTP 响应码(<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="external">HTTP Status Code</a> )</h4><p>1xx：#临时响应# 代表请求已经被接受，但需要继续处理。<br>　　100 Continue — 服务器仅接收到部分请求，但是一旦服务器并没有拒绝该请求，客户端应该继续发送其余的请求。<br>　　101 Switching Protocols — 服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。<br>　　102 Processing — 由WebDAV(RFC 2518)扩展的状态码，代表处理将被继续执行。<br>2xx：#成功# 代表请求已经被服务器接收、理解、并接受<br>　　200 OK：请求成功(其后是对GET和POST请求的应答文档。)<br>　　201 Created — 请求被创建完成，同时新的资源被创建。<br>　　202 Accepted — 供处理的请求已被接受，但是处理未完成。<br>　　203 Non-authoritative Information — 文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝。<br>　　204 No Content — 没有新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。<br>　　205 Reset Content — 没有新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。<br>　　206 Partial Content — 客户发送了一个带有Range头的GET请求，服务器完成了它。<br>　　207 Multi-Status — 由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。<br>3xx: #重定向# 代表客户端需要采取进一步的操作才能完成请求<br>　　300 Multiple Choices — 多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。<br>　　301 Moved Permanently — 所请求的页面已经转移至新的url。<br>　　302 Found — 所请求的页面已经临时转移至新的url。<br>　　303 See Other — 所请求的页面可在别的url下被找到。<br>　　304 Not Modified — 未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求(一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档)。服务器告诉客户，原来缓冲的文档还可以继续使用。<br>　　305 Use Proxy — 客户请求的文档应该通过Location头所指明的代理服务器提取。<br>　　306 Unused — 此代码被用于前一版本。目前已不再使用，但是代码依然被保留。<br>　　307 Temporary Redirect — 被请求的页面已经临时移至新的url。<br>4xx：#客户端错误# 代表客户端可能发生了错误，阻碍了服务器的处理，<br>　　400 Bad Request — 服务器未能理解请求或是请求参数有误。<br>　　401 Unauthorized — 被请求的页面需要用户名和密码。<br>　　402 Payment Required — 此代码尚无法使用(为了将来可能的需求而预留的。)<br>　　403 Forbidden — 对被请求页面的访问被禁止。<br>　　404 Not Found — 服务器无法找到被请求的页面。<br>　　405 Method Not Allowed — 请求中指定的方法不被允许。<br>　　406 Not Acceptable — 服务器生成的响应无法被客户端所接受。<br>　　407 Proxy Authentication Required — 用户必须首先使用代理服务器进行验证，这样请求才会被处理。<br>　　408 Request Timeout — 请求超出了服务器的等待时间。<br>　　409 Conflict — 由于冲突，请求无法被完成。<br>　　410 Gone — 被请求的页面不可用。<br>　　411 Length Required”Content-Length — “ 未被定义。如果无此内容，服务器不会接受请求。<br>　　412 Precondition Failed — 请求中的前提条件被服务器评估为失败。<br>　　413 Request Entity Too Large — 由于所请求的实体的太大，服务器不会接受请求。<br>　　414 Request-url Too Long — 由于url太长，服务器不会接受请求。当post请求被转换为带有很长的查询信息的get请求时，就会发生这种情况。<br>　　415 Unsupported Media Type — 由于媒介类型不被支持，服务器不会接受请求。<br>　　416 — 服务器不能满足客户在请求中指定的Range头。<br>　　417 Expectation Failed<br>5xx： #服务器错误# 代表服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。<br>　　500 Internal Server Error — 请求未完成。服务器遇到不可预知的情况。<br>　　501 Not Implemented — 请求未完成。服务器不支持所请求的功能。<br>　　502 Bad Gateway — 请求未完成。服务器从上游服务器收到一个无效的响应。<br>　　503 Service Unavailable — 请求未完成。服务器临时过载或当机。<br>　　504 Gateway Timeout — 网关超时。<br>　　505 HTTP Version Not Supported — 服务器不支持请求中指明的HTTP协议版本。</p>
<h4 id="HTTP1-1与HTTP1-1的区别-Key-Differences-between-HTTP-1-0-and-HTTP-1-1"><a href="#HTTP1-1与HTTP1-1的区别-Key-Differences-between-HTTP-1-0-and-HTTP-1-1" class="headerlink" title="HTTP1.1与HTTP1.1的区别(Key Differences between HTTP/1.0 and HTTP/1.1)"></a>HTTP1.1与HTTP1.1的区别(<a href="http://www8.org/w8-papers/5c-protocols/key/key.html" target="_blank" rel="external">Key Differences between HTTP/1.0 and HTTP/1.1</a>)</h4><p>最大的区别：HTTP1.0规定浏览器与服务器只保持短暂的链接，每次请求需要建立TCP连接，完成后立即断开；HTTP1.1支持持久连接，一个连接可用于多次响应请求交换，允许客户端不用等待上一次结果返回，就可以发送下一个请求。</p>
<p>总结：博客要坚持写，小问题也可以写写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有写博客了，记录几天前的一个bug，顺便回顾一些之前学的HTTP知识。&lt;br&gt;客户之前要求浏览器支持360和chrome，对版本没有什么要求。想到360极速模式使用的webkit内核，平常代码运行在又chrome上，我感觉可以任性了！但是最近客户改需求需要运行在IE10及以上，小伙伴们开始在IE10上测试。其中一处bug：某次HTTP 请求在chrome上返回200，但在IE10上返回401。&lt;br&gt;在chrome中运行，HTTP 请求详细信息截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../assets/img/4-17-1.png&quot;   align=center /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Font-end" scheme="https://irisgithub.github.io/categories/font-end/"/>
    
    
  </entry>
  
  <entry>
    <title>去掉jQuery</title>
    <link href="https://irisgithub.github.io/2017/04/01/%E5%8E%BB%E6%8E%89jQuery/"/>
    <id>https://irisgithub.github.io/2017/04/01/去掉jQuery/</id>
    <published>2017-04-01T07:59:49.000Z</published>
    <updated>2017-04-19T03:04:39.351Z</updated>
    
    <content type="html"><![CDATA[<p>一直在Angular中混用jQuery，用来操作DOM，因为它(wo)很(tai)方(nian)便(qing)，最近将jQuery从项目中移除了，将所有涉及到jQuery操作换为用angular提供的api或原生js来实现……虽然jQuery压缩过才100kb左右。<br>1.Angular内置jqLite，封装了部分操作DOM的api，使用angular.element(ele)相当于jQuery中的$,具体使用见官方<a href="https://code.angularjs.org/1.5.4/docs/api/ng/function/angular.element" target="_blank" rel="external">文档</a>。<br>因此我们所使用的jQuery选择器，例如：</p>
<pre><code class="javascript">$(<span class="string">"#empl-name"</span>).val();
</code></pre>
<p>可以换成：</p>
<pre><code class="javascript">angular.element(<span class="built_in">document</span>.querySelector(<span class="string">"#empl-name"</span>));
</code></pre>
<p>使用document.querySelector 的原因官方文档中有说明:</p>
<p><img src="../../../../assets/img/4-1-1.png" align="center"></p>
<a id="more"></a>
<p>2.替换掉依赖jQuery的插件。<br>例如，使用的jQuery的tooltip组件插件，现在换成ui bootstrap中的tooltip组件。<br>原来引入jQuery tooltip插件代码后，封装成指令：</p>
<pre><code class="javascript"><span class="meta">"use strict"</span>;
<span class="keyword">var</span> moduleName=<span class="string">"kass.widget.tooltip"</span>;
angular.module(moduleName,[])
.directive(<span class="string">"tooltip"</span>,[<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="keyword">return</span>{
        <span class="attr">restrict</span> : <span class="string">"A"</span>,
        <span class="attr">link</span> : <span class="function"><span class="keyword">function</span>(<span class="params">scope, element, attrs</span>)</span>{<span class="comment">//element:指令标签对象     attrs:指令属性</span>
            <span class="keyword">var</span> opts ={
                <span class="comment">//将带有tooltip属性的"Target element"传给插件创建tooltip</span>
                formatter: <span class="function"><span class="keyword">function</span>(<span class="params">scope</span>)</span>{
                    <span class="keyword">return</span> scope.$target.attr(<span class="string">"tooltip"</span>);<span class="comment">//$target是利用$(this)封装的jquery对象</span>
                },
                <span class="comment">//插件提供的tooltip属性值direction与指令属性tooltipDirection</span>
                direction : attrs.tooltipDirection ? attrs.tooltipDirection : <span class="string">"bottom"</span>
            };
            <span class="comment">//插件提供的tipper方法设置tooltip属性值</span>
            element.tipper(opts);
            element.one(<span class="string">"$destroy"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
                element.tipper(<span class="string">"destroy"</span>);
            });
        }
    }
}]);
<span class="built_in">module</span>.exports=moduleName;
</code></pre>
<p>引入ui bootstrap 中的tooptip部分：</p>
<pre><code class="javascript"><span class="built_in">require</span>(<span class="string">"./position"</span>);<span class="comment">//ui bootstrap的position部分</span>
<span class="built_in">require</span>(<span class="string">"./stackedMap"</span>);<span class="comment">//ui bootstrap的stackedMap部分</span>
angular.module(<span class="string">'ui.bootstrap.tooltip'</span>, [<span class="string">'ui.bootstrap.position'</span>, <span class="string">'ui.bootstrap.stackedMap'</span>,<span class="string">"uib/template/tooltip/tooltip-html-popup.html"</span>,<span class="string">"uib/template/tooltip/tooltip-popup.html"</span>,<span class="string">"uib/template/tooltip/tooltip-template-popup.html"</span>])     
.provider(<span class="string">'$uibTooltip'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{........})
......
.directive(<span class="string">'uibTooltipTemplatePopup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
  <span class="keyword">return</span> {
    <span class="attr">restrict</span>: <span class="string">'A'</span>,
    <span class="attr">scope</span>: { <span class="attr">contentExp</span>: <span class="string">'&amp;'</span>, <span class="attr">originScope</span>: <span class="string">'&amp;'</span> },
    <span class="attr">templateUrl</span>: <span class="string">'uib/template/tooltip/tooltip-template-popup.html'</span>
  };
});
......
angular.module(<span class="string">"uib/template/tooltip/tooltip-popup.html"</span>, []).run(......);
......
angular.module(<span class="string">'ui.bootstrap.tooltip'</span>).run(......);
</code></pre>
<p>发现github上的一个封装angular tooltip的<a href="https://github.com/720kb/angular-tooltips" target="_blank" rel="external">项目</a>,使用方便有demo,⊙o⊙……</p>
<p>3.jQuery的动画部分。<br>一些动画可以直接使用css的animation、transition属性进行设置，还可以使用angular提供的动画。<br>例如jQuery一个简单的改变位置动画，需要在动画完成后移除这个指令组件：</p>
<pre><code class="javascript">$(<span class="string">".side-modal"</span>).animate({<span class="attr">right</span>:<span class="string">'-100%'</span>},<span class="number">300</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    $scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        $scope.onRemove();
    });
});
</code></pre>
<p>使用angular的动画，要引入angular-animate.js文件，注入ngAnimate：</p>
<pre><code class="javascript"><span class="meta">"use strict"</span>;
<span class="built_in">require</span>(<span class="string">"./angular-animte-min"</span>);
<span class="keyword">var</span> moduleName = <span class="string">"animateTest"</span>;
angular.module(moduleName,[<span class="string">"ngAnimate"</span>])
.directive(myTest,[<span class="string">"$animate"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"><span class="string">"$animate"</span></span>)</span>{
    <span class="keyword">return</span>{
        <span class="attr">restrict</span> : <span class="string">"AE"</span>,
        <span class="attr">replace</span> : <span class="literal">false</span>,
        <span class="attr">scope</span> : {
            <span class="attr">onRemove</span> : <span class="string">"&amp;"</span>
        },
        <span class="attr">template</span> : <span class="built_in">require</span>(<span class="string">"html!../template/to/mytest.html"</span>),
        <span class="attr">controller</span> : [<span class="string">"$scope"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>{
            ......
            var slideBox = angular.element(<span class="built_in">document</span>.querySelector(<span class="string">".side-modal"</span>));
            $animate.addClass(slideBox,<span class="string">'set-right'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
                $scope.onRemove();<span class="comment">//callback,动画完成后移除指令</span>
            });
            ......
        }],
        <span class="attr">link</span>:<span class="function"><span class="keyword">function</span>(<span class="params">scope,element,attrs</span>)</span>{......}
    }
}]);
<span class="built_in">module</span>.exports=moduleName;
</code></pre>
<p>4.其他部分可以参考github上的一个项目：<a href="https://github.com/oneuijs/You-Dont-Need-jQuery" target="_blank" rel="external">You Don’t Need jQuery</a>。</p>
<hr>
<p><font color="red">April Fool’s Day </font>….⊙o⊙….</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直在Angular中混用jQuery，用来操作DOM，因为它(wo)很(tai)方(nian)便(qing)，最近将jQuery从项目中移除了，将所有涉及到jQuery操作换为用angular提供的api或原生js来实现……虽然jQuery压缩过才100kb左右。&lt;br&gt;1.Angular内置jqLite，封装了部分操作DOM的api，使用angular.element(ele)相当于jQuery中的$,具体使用见官方&lt;a href=&quot;https://code.angularjs.org/1.5.4/docs/api/ng/function/angular.element&quot;&gt;文档&lt;/a&gt;。&lt;br&gt;因此我们所使用的jQuery选择器，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;#empl-name&quot;&lt;/span&gt;).val();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以换成：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;angular.element(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#empl-name&quot;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用document.querySelector 的原因官方文档中有说明:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../../../assets/img/4-1-1.png&quot;   align=center /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Font-end" scheme="https://irisgithub.github.io/categories/font-end/"/>
    
    
      <category term="JavaScript" scheme="https://irisgithub.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>git学习记录</title>
    <link href="https://irisgithub.github.io/2017/03/17/git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://irisgithub.github.io/2017/03/17/git学习记录/</id>
    <published>2017-03-17T09:09:02.000Z</published>
    <updated>2017-04-01T07:57:08.292Z</updated>
    
    <content type="html"><![CDATA[<p>公司一直用的是<strong>svn</strong>（集中式版本控制系统 ），一般日常提交代码用<strong>update</strong>（从中央服务器上获取最新代码）和<strong>commit</strong>（将本地代码提交上去，提交前会用<em>Beyond Compare</em>软件对比修改一下）两个命令就能满足一般需求，偶尔会看一下日志，用一下版本回滚。但是最近搭博客，开始使用github，了解到<strong>git</strong>（分布式版本控制系统）好像很火？大家都在推荐，于是用了一下这个新工具。</p>
<p>首先，如果你想详细了解git原理和使用，狠狠点击<a href="https://git-scm.com/book/en/v2" target="_blank" rel="external">这里</a>！此外，还有很多关于git不同风格的博客啊，比如<a href="http://www.liaoxuefeng.com" target="_blank" rel="external">廖雪峰</a>写的git教程。<br>但是，如果你口味清奇有趣，可以选择<a href="http://learngitbranching.js.org/" target="_blank" rel="external">这个</a>，敲生动，适合食用！</p>
<p>然后，列一下学习记录：</p>
<p>先学点<strong>简单</strong>的：</p>
<p>1.网上下载安装git，得到大礼包：<strong>Git Bash</strong>，<strong>Git GUI</strong>，<strong>Git CMD</strong>，一般操作使用<strong>Git Bash</strong>即可。<br>2.本地新建文件，使用<em>git init</em>将它变成待用仓库。</p>
<a id="more"></a>
<p>3.获取代码：</p>
<pre><code class="dos">git clone &lt;server url&gt;             //将远程仓库 上的代码拉到仓库中。
</code></pre>
<p>4.修改代码后，这样提交它：</p>
<pre><code class="dos">git add &lt;filename&gt;               //提交 到缓存区（index）
</code></pre>
<p>或者使用：</p>
<pre><code class="dos">git add  .                      //提交 所有改动文件到缓存区
</code></pre>
<p>再将其提交到本地仓库中：</p>
<pre><code class="dos">git commit -m "修改信息"         //提交到本地仓库中的HEAD上
</code></pre>
<p>期间，你可以用<em>git status</em>查看文件变化。</p>
<p>下图是我修改blog中的文件时，<em>git status</em>返回的文件状态<br><img src="../../../../assets/img/3-17-1.png" align="center"></p>
<pre><code class="dos">git push origin master          //提交到远程仓库origin
</code></pre>
<p><img src="../../../../assets/img/3-17-2.png" align="center"></p>
<p>如果你没有进行第3步，这里使用：</p>
<pre><code class="dos">git remote add origin &lt;server url&gt;            //提交到远程仓库
</code></pre>
<p>5.我们经常要将远程仓库中的代码更新本地：</p>
<pre><code class="dos">git pull
</code></pre>
<p>满足基本的需求后，我们了解一下git的分支功能：</p>
<p>1.创建、查看、切换分支：</p>
<pre><code class="dos">git branch newbranch               //新建一个名newbranch的分支
git checkout -b newbranch             //新建一个名newbranch的分支并切换到新分支
git branch                         //查看分支
git checkout master                 //回到主分支master
</code></pre>
<p>然后就可以在确定的分支下操作（比如上方的基础操作）。</p>
<p>2.进行分支间的操作，比如：</p>
<pre><code class="dos">git branch -d newbranch        //删除这个分支  
git merge &lt;branchname&gt;         //合并分支到当前分支
</code></pre>
<p>来一张learngitbranch的图：<br><img src="../../../../assets/img/3-17-3.png" align="center"></p>
<p>此时可能产生冲突，用<em>git status</em>查看情况，再去文件修改解决冲突，用<em>git add <filename></filename></em>将冲突的文件标记为解决，再用<em>git status</em>确认冲突被解决，然后我们就可以用<em>git commit</em>提交了。</p>
<p>当然除了分支，git还有很多功能（标签，撤销操作，版本回退），当有其他情况可以去查找命令，以上。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司一直用的是&lt;strong&gt;svn&lt;/strong&gt;（集中式版本控制系统 ），一般日常提交代码用&lt;strong&gt;update&lt;/strong&gt;（从中央服务器上获取最新代码）和&lt;strong&gt;commit&lt;/strong&gt;（将本地代码提交上去，提交前会用&lt;em&gt;Beyond Compare&lt;/em&gt;软件对比修改一下）两个命令就能满足一般需求，偶尔会看一下日志，用一下版本回滚。但是最近搭博客，开始使用github，了解到&lt;strong&gt;git&lt;/strong&gt;（分布式版本控制系统）好像很火？大家都在推荐，于是用了一下这个新工具。&lt;/p&gt;
&lt;p&gt;首先，如果你想详细了解git原理和使用，狠狠点击&lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;这里&lt;/a&gt;！此外，还有很多关于git不同风格的博客啊，比如&lt;a href=&quot;http://www.liaoxuefeng.com&quot;&gt;廖雪峰&lt;/a&gt;写的git教程。&lt;br&gt;但是，如果你口味清奇有趣，可以选择&lt;a href=&quot;http://learngitbranching.js.org/&quot;&gt;这个&lt;/a&gt;，敲生动，适合食用！&lt;/p&gt;
&lt;p&gt;然后，列一下学习记录：&lt;/p&gt;
&lt;p&gt;先学点&lt;strong&gt;简单&lt;/strong&gt;的：&lt;/p&gt;
&lt;p&gt;1.网上下载安装git，得到大礼包：&lt;strong&gt;Git Bash&lt;/strong&gt;，&lt;strong&gt;Git GUI&lt;/strong&gt;，&lt;strong&gt;Git CMD&lt;/strong&gt;，一般操作使用&lt;strong&gt;Git Bash&lt;/strong&gt;即可。&lt;br&gt;2.本地新建文件，使用&lt;em&gt;git init&lt;/em&gt;将它变成待用仓库。&lt;/p&gt;
    
    </summary>
    
      <category term="Font-end" scheme="https://irisgithub.github.io/categories/font-end/"/>
    
    
  </entry>
  
  <entry>
    <title>从零到gulp</title>
    <link href="https://irisgithub.github.io/2017/03/16/%E4%BB%8E%E9%9B%B6%E5%88%B0gulp/"/>
    <id>https://irisgithub.github.io/2017/03/16/从零到gulp/</id>
    <published>2017-03-16T09:13:27.000Z</published>
    <updated>2017-05-09T09:09:37.026Z</updated>
    
    <content type="html"><![CDATA[<p>本菜刚开始写前端页面，目录是这样的，js放一起，html放一起：<br><img src="../../../../assets/img/3-16-1.png" align="center"><br>然后，我开始学nwjs啦，多了一个package.json文件（plugins打算用来放插件，是空的；.log文件打算用node的file模块写入日志），之后本菜默默开始写登录小窗，菜单，托盘，然后…写完demo明白自己很菜开始好好学js。<br><img src="../../../../assets/img/3-16-2.png" align="center"></p>
<a id="more"></a>
<p>开始刷书，刷博客，刷代码，看小伙伴们的代码…于是我开始写简单页面啦，开始用jquery（获取和操作DOM元素，写ajax请求），angularjs，最初目录是这样：<br><img src="../../../../assets/img/3-16-3.png" align="center"><br>开始安装node，利用npm管理模块，学着小伙伴用webpack，一个入口index.js文件，功能分开写再打包成一个js文件；装fis3，更改代码可以自动刷新页面，目录变成这样：<br><img src="../../../../assets/img/3-16-4.png" align="center"><br>开始好好学angularjs，路由，数据绑定，指令，师傅组装的ui组件…发现自己真的菜，好多知识要学，嗯！舍弃fis3（文件多了，release变慢，-wL要等好久），用http-server，目录变成这样：<br><img src="../../../../assets/img/3-16-5.png" align="center"><br>然后，发现gulp,新大陆！添加一个gulpfile.js文件，用gulp-connect创建web服务器；可以watch页面，gulp-livereload自动刷新；嵌入原来的webpack.config.js还能继续打包；只用运行一个gulp，开心！</p>
<p>某一天，我发现我的cpu原来是这样：<br><img src="../../../../assets/img/3-16-6.png" align="center"><br>开了gulp之后，变成这样：<br><img src="../../../../assets/img/3-16-7.png" align="center"></p>
<p>………</p>
<p>我想这一定是我的错！</p>
<p>………</p>
<p>最后发现用gulp来watch时一定不要加很多文件啊！只watch经常改变的。不然电脑变得超级卡，还以为自己一脚把主机踢坏了(⊙v⊙)…..就酱！</p>
<p>感谢师傅！</p>
<p>—-2017-4-30 更新—-<br>gulp + webpack2，附上gulpfile.js的代码：</p>
<pre><code class="javascript"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),
  gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>),
  clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>),
  concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),
  cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>),
  connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>),
  livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>),
  webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>),
  webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.config.js'</span>);

<span class="comment">//创建连接</span>
gulp.task(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
  connect.server({
    <span class="attr">root</span> : <span class="string">"./"</span>,
    <span class="attr">ip</span> : <span class="string">"192.168.1.77"</span>,
    <span class="attr">port</span> : <span class="number">8080</span>,
    <span class="attr">livereload</span> : <span class="literal">true</span>
  });
});

<span class="comment">//图片和iconfont到拷贝到assets</span>
gulp.task(<span class="string">'copy:images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>{
  gulp.src([<span class="string">'./admin/static/img/**/*'</span>]).pipe(gulp.dest(<span class="string">'./admin/assets/img'</span>))
    .on(<span class="string">'end'</span>, done);
  gulp.src([<span class="string">'./admin/static/font/*'</span>]).pipe(gulp.dest(<span class="string">'./admin/assets/font'</span>))
    .on(<span class="string">'end'</span>, done);
});

<span class="comment">//合并压缩css到assets</span>
gulp.task(<span class="string">'min:css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>{
  gulp.src([<span class="string">'./admin/static/css/*.css'</span>])
    .pipe(concat(<span class="string">'./style.min.css'</span>))
    .pipe(cssmin())
    .pipe(gulp.dest(<span class="string">'./admin/assets/css/'</span>))
    .on(<span class="string">'end'</span>, done);
});

<span class="comment">//监听文件变化</span>
gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>{
  livereload.listen();
  gulp.watch(<span class="string">'./admin/assets/**/*'</span>,[<span class="string">'build-admin'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>{
    livereload.changed(file.path);
  }).on(<span class="string">'end'</span>, done);
});

<span class="comment">//webpack打包</span>
<span class="keyword">var</span> myDevConfig = <span class="built_in">Object</span>.create(webpackConfig);
<span class="keyword">var</span> devCompiler = webpack(myDevConfig);
gulp.task(<span class="string">"build-admin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>{
  devCompiler.run(<span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>{
        <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> gutil.PluginError(<span class="string">"webpack:build-admin"</span>, err);
        gutil.log(<span class="string">"[webpack:build-admin]"</span>, stats.toString({
          <span class="attr">colors</span>: <span class="literal">true</span>
        }));
        callback();
    });
});

<span class="comment">//build之前clean</span>
gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>{
  gulp.src([<span class="string">'admin/assets'</span>])
    .pipe(clean())
    .on(<span class="string">'end'</span>, done);
});

gulp.task(<span class="string">'default'</span>,[<span class="string">'connect'</span>,<span class="string">'copy:images'</span>,<span class="string">'min:css'</span>,<span class="string">'watch'</span>,<span class="string">'build-admin'</span>]);
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本菜刚开始写前端页面，目录是这样的，js放一起，html放一起：&lt;br&gt;&lt;img src=&quot;../../../../assets/img/3-16-1.png&quot;   align=center /&gt;&lt;br&gt;然后，我开始学nwjs啦，多了一个package.json文件（plugins打算用来放插件，是空的；.log文件打算用node的file模块写入日志），之后本菜默默开始写登录小窗，菜单，托盘，然后…写完demo明白自己很菜开始好好学js。&lt;br&gt;&lt;img src=&quot;../../../../assets/img/3-16-2.png&quot;   align=center /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Font-end" scheme="https://irisgithub.github.io/categories/font-end/"/>
    
    
  </entry>
  
  <entry>
    <title>JS对字符串操作</title>
    <link href="https://irisgithub.github.io/2017/03/02/JS%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <id>https://irisgithub.github.io/2017/03/02/JS对字符串操作/</id>
    <published>2017-03-02T10:44:08.000Z</published>
    <updated>2017-03-29T09:49:32.571Z</updated>
    
    <content type="html"><![CDATA[<h4 id="截取字符串："><a href="#截取字符串：" class="headerlink" title="截取字符串："></a>截取字符串：</h4><p><strong>1.split： 把一个字符串分割成字符串数组。</strong></p>
<p><em>功能</em> ：使用一个指定的分隔符把字符串分隔存储到数组<br><em>语法</em> ：<font color="red">str.split(separator,size)</font><br><em>参数</em> ：</p>
<ul>
<li>str：必选项。要截取的字符串。</li>
<li>separator: 必选项。要分割的条件，是字符串或表达式。</li>
<li>size：可选项。返回数组的长度。不定义则全部返回。</li>
</ul>
<p><em>实例</em> ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=”jpg|bmp|gif|ico|png”; arr=str.split(”|”);<span class="comment">//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>2.slice：   提取字符串的某个部分。</strong></p>
<p><em>功能</em>：返回一个新的数组，包含从start到end（不包括该元素）的arrayobject中的元素。<br><em>语法</em>：<font color="red">str.slice(startPos,endPos)</font><br><em>参数</em>：</p>
<ul>
<li>startPos: 必选项。字符串的起始位置。如果参数负数，则从字符串的结尾处算起。 也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。</li>
<li>endPos: 可选项。提取字符串的结束小标。 如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</li>
</ul>
<p><em>实例</em>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'ahji3o3s4e6p8a0sdewqdasj'</span></div><div class="line">alert(str.slice(<span class="number">2</span>,<span class="number">5</span>))   <span class="comment">//结果ji3</span></div></pre></td></tr></table></figure></p>
<p><strong>3.substring：  返回指定位置的子字符串。</strong></p>
<p><em>功能</em>：用于提取字符串中介于两个指定下标之间的字符。<br><em>语法</em>：<font color="red">str.substring(startPos,endPos)</font><br><em>参数</em>：</p>
<ul>
<li>str: 必选项。要提取的字符串。</li>
<li>startPos: 必选项。子字符串的起始位置，该索引从0开始计算。 一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。</li>
<li>endPos: 可选项。子字符串的结束位置，该索引从0开始计算。 一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。 如果省略该参数，那么返回的子串会一直到字符串的结尾。</li>
</ul>
<blockquote>
<p>注： 返回 一个新的字符串，该字符串值包含 stringObject 的一个子字符串，其内容是从 start 处到 stop-1 处的所有字符，其长度为 stop 减 start。 说明 substring 方法返回的子串包括 start 处的字符，但不包括 end 处的字符。 如果 start 与 end 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。 如果 start 比 end 大，那么该方法在提取子串之前会先交换这两个参数。 如果 start 或 end 为负数，那么它将被替换为 0。</p>
</blockquote>
<p><em>实例</em>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str=<span class="string">'ahji3o3s4e6p8a0sdewqdasj'</span></div><div class="line">alert(str.substring(<span class="number">2</span>,<span class="number">6</span>))   <span class="comment">//结果为ji3o3</span></div></pre></td></tr></table></figure></p>
<p><strong>4.substr:    返回字符串中指定位置开始的指定长度的子字符串。</strong></p>
<p><em>语法</em>：<font color="red">str.substr(startPos,length)</font><br><em>参数</em>：</p>
<ul>
<li>str：必选项。要提取的字符串。</li>
<li>startPos: 必选项。返回字符串的起始位置，单位为数字。 字符串中的第一个字符的索引为 0。为负数，则默认为0</li>
<li>length: 可选项。返回字符串的字符个数。 说明 如果 length 为 0 或负数，将返回一个空字符串。 如果没有指定该参数，则子字符串将延续到stringObject的最后。</li>
</ul>
<p><em>实例</em>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"0123456789"</span>;</div><div class="line">alert(str.substring(<span class="number">5</span>));	<span class="comment">//"56789"</span></div><div class="line">alert(str.substring(<span class="number">10</span>));	<span class="comment">//""</span></div><div class="line">alert(str.substring(<span class="number">2</span>,<span class="number">12</span>));	<span class="comment">//"23456789"</span></div><div class="line">alert(str.substring(<span class="number">2</span>,<span class="number">-2</span>));	<span class="comment">//"01"</span></div><div class="line">alert(str.substring(<span class="number">-1</span>,<span class="number">5</span>));	<span class="comment">//"01234"</span></div></pre></td></tr></table></figure></p>
<h4 id="合并字符串"><a href="#合并字符串" class="headerlink" title="合并字符串"></a>合并字符串</h4><p><strong>1.join</strong></p>
<p><em>功能</em>：使用您选择的分隔符将一个数组合并为一个字符串。</p>
<p><em>实例</em>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> delimitedString=myArray.join(delimiter);</div><div class="line"><span class="keyword">var</span> myList=<span class="keyword">new</span> <span class="built_in">Array</span>(”jpg”,”bmp”,”gif”,”ico”,”png”);</div><div class="line"><span class="keyword">var</span> portableList=myList.join(”|”);<span class="comment">//结果是jpg|bmp|gif|ico|png</span></div></pre></td></tr></table></figure></p>
<p><strong>2.concat</strong></p>
<p><em>功能</em>：将两个数组连接在一起。</p>
<p><em>实例</em>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">arr1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line">arr2=[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div><div class="line">alert(arr1.concat(arr2))  <span class="comment">//结果为[1,2,3,4,5,6,7,8]</span></div></pre></td></tr></table></figure></p>
<h4 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h4><p><strong>1.charAt</strong></p>
<p> <em>功能</em>：返回指定位置的<font color="red">字符</font>。字符串中第一个字符的下标是 0。如果参数 index 不在 0 与 string.length 之间，该方法将返回一个空字符串。</p>
<p><em>实例</em>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'a,g,i,d,o,v,w,d,k,p'</span></div><div class="line">alert(str.charAt(<span class="number">2</span>))  <span class="comment">//结果为g</span></div></pre></td></tr></table></figure></p>
<p><strong>2.charCodeAt</strong></p>
<p><em>功能</em>：charCodeAt() 方法可返回指定位置的字符的<font color="red">Unicode 编码</font>。这个返回值是 0 - 65535 之间的整数。<br>方法 charCodeAt() 与 charAt() 方法执行的操作相似，只不过前者返回的是位于指定位置的字符的编码，而后者返回的是字符子串。</p>
<p><em>实例</em>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">'a,g,i,d,o,v,w,d,k,p'</span></div><div class="line">alert(str.charCodeAt(<span class="number">2</span>))  <span class="comment">//结果为103。即g的Unicode编码为103</span></div></pre></td></tr></table></figure></p>
<p><strong>3.replace:   用于在字符串中用一些字符替换另一些字符。</strong></p>
<p><em>语法</em>：<font color="red">str.replace(string,replacement)</font><br><em>参数</em>：</p>
<ul>
<li>str：必选项。要替换的字符串。</li>
<li>string:必选项。正则对象。</li>
<li>replacement: 必选项。要替换的字符。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;截取字符串：&quot;&gt;&lt;a href=&quot;#截取字符串：&quot; class=&quot;headerlink&quot; title=&quot;截取字符串：&quot;&gt;&lt;/a&gt;截取字符串：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1.split： 把一个字符串分割成字符串数组。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;功能&lt;/em&gt; ：使用一个指定的分隔符把字符串分隔存储到数组&lt;br&gt;&lt;em&gt;语法&lt;/em&gt; ：&lt;font color=red&gt;str.split(separator,size)&lt;/font&gt;&lt;br&gt;&lt;em&gt;参数&lt;/em&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;str：必选项。要截取的字符串。&lt;/li&gt;
&lt;li&gt;separator: 必选项。要分割的条件，是字符串或表达式。&lt;/li&gt;
&lt;li&gt;size：可选项。返回数组的长度。不定义则全部返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;实例&lt;/em&gt; ：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=”jpg|bmp|gif|ico|png”; arr=str.split(”|”);&lt;span class=&quot;comment&quot;&gt;//arr是一个包含字符值”jpg”、”bmp”、”gif”、”ico”和”png”的数组&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Font-end" scheme="https://irisgithub.github.io/categories/font-end/"/>
    
    
      <category term="JavaScript" scheme="https://irisgithub.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>WPF笔记</title>
    <link href="https://irisgithub.github.io/2017/03/02/WPF%E7%AC%94%E8%AE%B0/"/>
    <id>https://irisgithub.github.io/2017/03/02/WPF笔记/</id>
    <published>2017-03-02T10:41:51.000Z</published>
    <updated>2017-04-05T03:58:19.062Z</updated>
    
    <content type="html"><![CDATA[<h3 id="改写窗体："><a href="#改写窗体：" class="headerlink" title="改写窗体："></a>改写窗体：</h3><p><strong>1.WPF中使用默认窗口框架的外观，可以更改属性：(<a href="http://www.cnblogs.com/libaoheng/archive/2011/11/18/2253751.html" target="_blank" rel="external">参考</a>)</strong><br><em>Icon</em>: 指定窗口的图标；<br><em>Title</em>: 指定窗口的标题；<br><em>WindowStyle</em>: 指定窗口样式，有4个取值：</p>
<ul>
<li>None，无边框；（当ResizeMode属性为NoResize时，仅剩下窗口核心。）</li>
<li>SingleBorderWindow，单边框【默认】；</li>
<li>ThreeDBorderWindow，3D边框；</li>
<li>ToolBorderWindow，工具箱窗口；</li>
<li>ResizeMode 是指定大小调节样式，有4个取值：</li>
<li>NoResize，不可调节，同时没有最大最小按钮；</li>
<li>CanMinimize，不可调节。但可以最小化；（此时最大化按钮不可用）</li>
<li>CanResize，可调节【默认】；</li>
<li>CanResizeWithGrid，可根据网格调节；（窗口右下脚显示可调节网格）</li>
<li>WindowStartLocation 指定窗口初始位置，有3个取值：</li>
<li>Manual，手工指定位置，表示可以通过设置其Top、Left属性值来决定窗口的初始位置；</li>
<li>CenterScreen，屏幕中央；</li>
<li>CenterOwner，父窗体中央；<blockquote>
<p>另外：</p>
<ul>
<li>MaxWidth、MinWidth、MaxHeight、MinHeight ：表示窗口最大宽度、最小宽度、最大高度、最小高度。可以通过得到和更改这些属性值，来获取和改变窗口的大小和长宽范围。</li>
<li>TitlebarHeight=”45”          //修改窗体titlebar高度；</li>
<li>AllowsTransparency：获取或设置一个值，该值指示窗口的工作区是否支持透明；</li>
</ul>
</blockquote>
</li>
</ul>
<a id="more"></a>
<p><strong>2.设置窗体无边框：</strong><br>     设置 WindowStyle=”None”、  AllowsTransparency=”True” 即可。<br>     <em>如下</em>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Window</span></span></div><div class="line">    <span class="attr">x:Class</span>=<span class="string">"WpfApplication1.MainWindow"</span> </div><div class="line">    <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span> </div><div class="line">    <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span> </div><div class="line">    <span class="attr">Title</span>=<span class="string">"MainWindow"</span> <span class="attr">Height</span>=<span class="string">"350"</span> <span class="attr">Width</span>=<span class="string">"525"</span>   </div><div class="line">    <span class="attr">WindowStyle</span>=<span class="string">"None"</span> </div><div class="line">    <span class="attr">AllowsTransparency</span>=<span class="string">"True"</span>&gt; </div><div class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>3.窗口拖放：</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_MouseLeftButtonDown</span>(<span class="params"><span class="keyword">object</span> sender, MouseButtonEventArgs e</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.DragMove();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>调用：</em></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.MouseLeftButtonDown += <span class="keyword">delegate</span> &#123; DragMove(); &#125;;</div></pre></td></tr></table></figure>
<p>或：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MouseDown=<span class="string">"Window_MouseDown"</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Window_MouseDown</span>(<span class="params"><span class="keyword">object</span> sender, MouseButtonEventArgs e</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span> (e.LeftButton == MouseButtonState.Pressed)&#123;</div><div class="line">        DragMove();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>4.自定义窗体最大化、最小化、关闭</strong><br>如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_min_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.WindowState = WindowState.Minimized;     </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_max_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.WindowState == WindowState.Maximized)&#123;</div><div class="line">    	<span class="keyword">this</span>.WindowState = WindowState.Normal; <span class="comment">//还原 </span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">       <span class="keyword">this</span>.WindowState = WindowState.Maximized;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_close_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.Close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>5.窗口阴影：</strong>(WPF4.5)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">x:Class</span>=<span class="string">"WPFTest.MainWindow"</span></span></div><div class="line">    <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span></div><div class="line">    <span class="attr">xmlns:x</span>=<span class="string">"http://schemas.microsoft.com/winfx/2006/xaml"</span></div><div class="line">    <span class="attr">Title</span>=<span class="string">"MainWindow"</span></div><div class="line">    <span class="attr">Width</span>=<span class="string">"525"</span></div><div class="line">    <span class="attr">Height</span>=<span class="string">"350"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">WindowChrome.WindowChrome</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">WindowChrome</span> <span class="attr">CaptionHeight</span>=<span class="string">"30"</span></span></div><div class="line">                      <span class="attr">CornerRadius</span>=<span class="string">"0"</span></div><div class="line">                      <span class="attr">GlassFrameThickness</span>=<span class="string">"1"</span></div><div class="line">                      <span class="attr">NonClientFrameEdges</span>=<span class="string">"None"</span></div><div class="line">                      <span class="attr">ResizeBorderThickness</span>=<span class="string">"5"</span></div><div class="line">                      <span class="attr">UseAeroCaptionButtons</span>=<span class="string">"False"</span> /&gt;</div><div class="line">    	<span class="tag">&lt;/<span class="name">WindowChrome</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Grid</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="tooltip"><a href="#tooltip" class="headerlink" title="tooltip"></a>tooltip</h3><p>给某个空间增加tooltip显示详细信息:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Tip_MouseMove</span>(<span class="params"><span class="keyword">object</span> sender, MouseEventArgs e</span>)</span>&#123;</div><div class="line">    ListViewItem listitem = (sender <span class="keyword">as</span> Image).TryFindParent&lt;ListViewItem&gt;();</div><div class="line">    FDObject item = (FDObject)listitem.DataContext;           </div><div class="line">    <span class="keyword">if</span> (item != <span class="literal">null</span>)&#123;</div><div class="line">        (sender <span class="keyword">as</span> Image).ToolTip = item.path;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接用control.Tooltip=text;   在鼠标移入事件中确定</p>
<h3 id="System-Drawing-Image对象"><a href="#System-Drawing-Image对象" class="headerlink" title="System.Drawing.Image对象"></a>System.Drawing.Image对象</h3><p><strong>System.Drawing.Image 和 System.Windows.Media.ImageSource 之间转换</strong><br><strong>例：</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MemoryStream ms = <span class="keyword">new</span> MemoryStream ();</div><div class="line"><span class="keyword">var</span> bitmap = <span class="keyword">new</span> BitmapImage();</div><div class="line">bitmap.BeginInit();</div><div class="line">userImage.Save (ms,System.Drawing.Imaging. ImageFormat.Bmp);</div><div class="line">ms.Seek(<span class="number">0</span>, SeekOrigin.Begin);</div><div class="line">bitmap.StreamSource = ms;</div><div class="line">bitmap.EndInit();</div><div class="line">emplImage.Source = bitmap;</div><div class="line"><span class="keyword">return</span> emplImage;</div></pre></td></tr></table></figure></p>
<h3 id="旋转动画："><a href="#旋转动画：" class="headerlink" title="旋转动画："></a>旋转动画：</h3><p><strong>例：</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Button_Click</span>(<span class="params"><span class="keyword">object</span> sender, RoutedEventArgs e</span>)</span>&#123;</div><div class="line">    RotateTransform a = <span class="keyword">new</span> RotateTransform();</div><div class="line">    Refresh.RenderTransform = a;</div><div class="line">    Refresh.RenderTransformOrigin = <span class="keyword">new</span> Point(<span class="number">0.5</span>, <span class="number">0.5</span>);</div><div class="line">    DoubleAnimation myDouble = <span class="keyword">new</span> DoubleAnimation(<span class="number">0</span>, <span class="number">360</span>, <span class="keyword">new</span> Duration(TimeSpan.FromSeconds(<span class="number">1</span>)));</div><div class="line">    Storyboard story = <span class="keyword">new</span> Storyboard();</div><div class="line">    myDouble.RepeatBehavior = RepeatBehavior.Forever;</div><div class="line">    story.Children.Add(myDouble);</div><div class="line">    Storyboard.SetTarget(myDouble, Refresh);</div><div class="line">    Storyboard.SetTargetProperty(myDouble, <span class="keyword">new</span> PropertyPath(<span class="string">"RenderTransform.Angle"</span>));</div><div class="line">    story.Begin();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Grid</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">x:Name</span>=<span class="string">"Refresh"</span>  <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span>    <span class="attr">Text</span>=<span class="string">"&amp;#xe712;"</span>   /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Bottom"</span> <span class="attr">HorizontalAlignment</span>=<span class="string">"Center"</span> <span class="attr">Width</span>=<span class="string">"100"</span> <span class="attr">Height</span>=<span class="string">"50"</span> <span class="attr">Click</span>=<span class="string">"Button_Click"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;改写窗体：&quot;&gt;&lt;a href=&quot;#改写窗体：&quot; class=&quot;headerlink&quot; title=&quot;改写窗体：&quot;&gt;&lt;/a&gt;改写窗体：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.WPF中使用默认窗口框架的外观，可以更改属性：(&lt;a href=&quot;http://www.cnblogs.com/libaoheng/archive/2011/11/18/2253751.html&quot;&gt;参考&lt;/a&gt;)&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Icon&lt;/em&gt;: 指定窗口的图标；&lt;br&gt;&lt;em&gt;Title&lt;/em&gt;: 指定窗口的标题；&lt;br&gt;&lt;em&gt;WindowStyle&lt;/em&gt;: 指定窗口样式，有4个取值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;None，无边框；（当ResizeMode属性为NoResize时，仅剩下窗口核心。）&lt;/li&gt;
&lt;li&gt;SingleBorderWindow，单边框【默认】；&lt;/li&gt;
&lt;li&gt;ThreeDBorderWindow，3D边框；&lt;/li&gt;
&lt;li&gt;ToolBorderWindow，工具箱窗口；&lt;/li&gt;
&lt;li&gt;ResizeMode 是指定大小调节样式，有4个取值：&lt;/li&gt;
&lt;li&gt;NoResize，不可调节，同时没有最大最小按钮；&lt;/li&gt;
&lt;li&gt;CanMinimize，不可调节。但可以最小化；（此时最大化按钮不可用）&lt;/li&gt;
&lt;li&gt;CanResize，可调节【默认】；&lt;/li&gt;
&lt;li&gt;CanResizeWithGrid，可根据网格调节；（窗口右下脚显示可调节网格）&lt;/li&gt;
&lt;li&gt;WindowStartLocation 指定窗口初始位置，有3个取值：&lt;/li&gt;
&lt;li&gt;Manual，手工指定位置，表示可以通过设置其Top、Left属性值来决定窗口的初始位置；&lt;/li&gt;
&lt;li&gt;CenterScreen，屏幕中央；&lt;/li&gt;
&lt;li&gt;CenterOwner，父窗体中央；&lt;blockquote&gt;
&lt;p&gt;另外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MaxWidth、MinWidth、MaxHeight、MinHeight ：表示窗口最大宽度、最小宽度、最大高度、最小高度。可以通过得到和更改这些属性值，来获取和改变窗口的大小和长宽范围。&lt;/li&gt;
&lt;li&gt;TitlebarHeight=”45”          //修改窗体titlebar高度；&lt;/li&gt;
&lt;li&gt;AllowsTransparency：获取或设置一个值，该值指示窗口的工作区是否支持透明；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Others" scheme="https://irisgithub.github.io/categories/others/"/>
    
    
      <category term="WPF" scheme="https://irisgithub.github.io/tags/wpf/"/>
    
  </entry>
  
  <entry>
    <title>my first blog</title>
    <link href="https://irisgithub.github.io/2017/03/02/my-first-blog/"/>
    <id>https://irisgithub.github.io/2017/03/02/my-first-blog/</id>
    <published>2017-03-02T08:40:04.000Z</published>
    <updated>2017-04-05T08:51:39.763Z</updated>
    
    <content type="html"><![CDATA[<p>博客由hexo+github搭建，遵循markdown语法来编辑博客，网上教程很多，比较简单。<br>博客内容来自于印象笔记，从我的小本本上选一些搬出来，(⊙v⊙)嗯！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客由hexo+github搭建，遵循markdown语法来编辑博客，网上教程很多，比较简单。&lt;br&gt;博客内容来自于印象笔记，从我的小本本上选一些搬出来，(⊙v⊙)嗯！&lt;/p&gt;

    
    </summary>
    
      <category term="Others" scheme="https://irisgithub.github.io/categories/others/"/>
    
    
  </entry>
  
</feed>
